create or replace PACKAGE BODY                                                                ACP_COHORT_REFRESH AS

  PROCEDURE PRINT_ERROR (v_proc_name varchar2, v_code number, v_errm varchar2) AS
  BEGIN 
    INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,COMMENTS) values (v_proc_name, sysdate, null, 'ERROR - Code: ' || v_code || '- ' || v_errm);
  END PRINT_ERROR;

  PROCEDURE p_create_pc_department_tbl AS
   v_procname varchar2(100) := 'p_create_pc_department_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_DEPT_DRV(DEPARTMENT_ID NUMBER, LOC_ID number)
--                        ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT INTO XDR_ACP_DEPT_DRV
SELECT DISTINCT dep.DEPARTMENT_ID
            ,loc.loc_id
FROM clarity.CLARITY_DEP dep
left join clarity_loc    loc on dep.rev_loc_id = loc.loc_id
WHERE dep.DEPARTMENT_ID IN (
910314,
910310,
70085,
80366,
80039,
940035,
940043,
60155,
60156,
10511,
910227,
910228,
910230,
910231,
910177,
910178,
50541,
80273,
80279,
80114,
20511,
80169,
80179,
80044,
80382,
80329,
80049,
940012,
940013,
940015,
940016,
940017,
940018,
940019,
80087,
940038,
61026,
70001,
70009,
70003,
70005,
70006,
70007,
70008,
70010,
70011,
60678,
60679,
70079,
70032,
80168,
70034,
70035,
60152,
60153,
60159,
60160,
60161,
60162,
70080,
60167,
60170,
60173,
60175,
60176,
60177,
60178,
60180,
60181,
10009,
10014,
10030,
10031,
80399,
20560,
80000,
80368,
20570,
60079,
80337,
70186,
70190,
20561,
80379,
70232,
72005,
70210,
10501149,
80190,
80197,
60610,
60614,
60618,
60619,
60620,
60624,
60658,
60659,
60078,
60083,
10501190,
21200003,
21501001,
10501101,
80286,
80293,
60737,
60745,
70090,
70092,
70095,
20006,
20007,
20009,
70183,
70185,
80392,
20010,
70191,
20018,
80165,
20024,
80112,
80115,
70208,
70211,
70215,
70216,
80088,
80090,
30101101,
99102100,
70004,
80124,
80125,
80132,
80139,
80142,
80156,
80158,
80163,
80164,
80171,
60201,
80178,
72004,
72008,
80001,
80002,
80003,
80006,
80007,
80008,
80009,
80034,
80035,
80038,
80040,
80047,
80048,
80060,
80068
)'
    ;
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DEPT_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DEPT_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_pc_department_tbl;



  PROCEDURE p_create_initial_diagnoses_tbl AS
   v_procname varchar2(100) := 'p_create_initial_diagnoses_table';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_DX_TEMP(ICD_CODE VARCHAR2(10 BYTE), DX_FLAG VARCHAR2(25 BYTE))
--ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL
INTO XDR_ACP_DX_TEMP VALUES(''155.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''155.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''155.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.1'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.11'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.12'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.13'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.14'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.1'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.11'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.12'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''J95.850'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.3'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.31'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.4'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.40'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.41'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.60'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.69'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.2'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''572.2'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.5'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''428.0'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.1'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.2'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.20'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.21'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.22'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.23'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.3'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.30'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.31'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.32'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.33'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.4'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.40'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.41'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.42'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.43'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.9'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''456.0'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''456.2'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''456.20'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''456.21'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''491.2'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''491.20'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''491.21'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''491.22'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''492.0'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.2'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.20'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.21'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.22'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''496'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''511.81'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''567.0'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.2'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.21'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.23'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.29'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.8'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.89'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.9'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.2'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.6'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''572.2'',''ENCEPHALOPATHY'')
INTO XDR_ACP_DX_TEMP VALUES(''572.4'',''HEPATORENAL'')
INTO XDR_ACP_DX_TEMP VALUES(''585.5'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''585.6'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''789.5'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''789.51'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''789.51'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''789.59'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''V42.0'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V45.1'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V45.11'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V45.12'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.0'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.1'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.2'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.3'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.31'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.32'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.8'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.39'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.11'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.19'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.31'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.32'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.49'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.51'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.52'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.60'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.70'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.81'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.82'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C80.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.09'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.19'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.29'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.39'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.49'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.79'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.99'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C85.19'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C85.29'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C85.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.52'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.62'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.92'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.A2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C92.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C92.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C95.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''G12.21'',''ALS'')
INTO XDR_ACP_DX_TEMP VALUES(''G20'',''PARKINSONS'')
INTO XDR_ACP_DX_TEMP VALUES(''G96.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''I09.81'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I11.0'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I13.0'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I13.2'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.1'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.9'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I85.01'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''I85.11'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''J43.9'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J44.0'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J44.1'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J44.9'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J91.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.9'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K67'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.3'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.30'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.31'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.4'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.40'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.41'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K72.90'',''ENCEPHALOPATHY'')
INTO XDR_ACP_DX_TEMP VALUES(''K72.91'',''ENCEPHALOPATHY'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.3'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.4'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.5'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.60'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.69'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K76.7'',''HEPATORENAL'')
INTO XDR_ACP_DX_TEMP VALUES(''N18.5'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''N18.6'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''R18.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''R18.8'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''Z94.0'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.2 '',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.81'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''150'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''158.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''158.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''158.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.81'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.82'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''199.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.70'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.71'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.72'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.73'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.74'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.75'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.76'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.77'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.78'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.40'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.50'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.60'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.70'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.90'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''202.80'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''204.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''204.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''204.92'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''205.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''205.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''205.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''208.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''332.0'',''PARKINSONS'')
INTO XDR_ACP_DX_TEMP VALUES(''335.20'',''ALS'')
INTO XDR_ACP_DX_TEMP VALUES(''349.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''398.91'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''402.01'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''402.11'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''402.91'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.01'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.03'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.11'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.13'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.91'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.93'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.21'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.20'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.22'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.23'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.30'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.31'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.32'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.33'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.40'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.41'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.42'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.43'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I85.10'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.0'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.2'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.8'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.2'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z91.15'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.31'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.01'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.02'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.32'',''ESRD'')
SELECT 1 FROM DUAL'
    ;
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DX_TEMP';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DX_TEMP', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_initial_diagnoses_tbl;




  PROCEDURE p_create_final_diagnoses_tbl AS
   v_procname varchar2(100) := 'p_create_final_diagnoses_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_DX_LOOKUP(DX_ID NUMBER, ICD_CODE VARCHAR2(10 BYTE), DX_FLAG VARCHAR2(25 BYTE))
--ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT INTO XDR_ACP_DX_LOOKUP 
                        select edg.dx_id 
                        ,drv.* 
                        from XDR_ACP_DX_TEMP      drv 
                        join edg_current_icd9           edg on drv.icd_CODE = edg.CODE  
                        UNION 
                        select edg.dx_id 
                        ,drv.* 
                        from XDR_ACP_DX_TEMP      drv 
                        join edg_current_icd10           edg on drv.icd_CODE = edg.CODE'
    ;
    commit;   
-- create index
EXECUTE IMMEDIATE  'create index XDR_ACP_DX_LOOKUP_id_dx_id on XDR_ACP_DX_LOOKUP(dx_id)';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DX_LOOKUP';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DX_LOOKUP', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_final_diagnoses_tbl;

  PROCEDURE p_create_pat_status_tbl AS
   v_procname varchar2(100) := 'p_create_pat_status_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_PAT_STATUS(PAT_FLAG_TYPE_C NUMBER) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
                            INTO XDR_ACP_PAT_STATUS VALUES(6) 
                            INTO XDR_ACP_PAT_STATUS VALUES(8) 
                            INTO XDR_ACP_PAT_STATUS VALUES(9) 
                            INTO XDR_ACP_PAT_STATUS VALUES(1018) 
                            INTO XDR_ACP_PAT_STATUS VALUES(1017) 
                            SELECT 1 FROM DUAL';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_PAT_STATUS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PAT_STATUS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_pat_status_tbl;


PROCEDURE p_create_appt_status_tbl AS
   v_procname varchar2(100) := 'p_create_appt_status_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_APPT_STATUS(appt_status_c NUMBER, appt_cat VARCHAR2(25 BYTE)) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
                        INTO XDR_ACP_APPT_STATUS VALUES(1,''include'') 
                        INTO XDR_ACP_APPT_STATUS VALUES(3,''exclude'') 
                        INTO XDR_ACP_APPT_STATUS VALUES(4,''exclude'') 
                        INTO XDR_ACP_APPT_STATUS VALUES(5,''exclude'') 
                        SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_APPT_STATUS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_APPT_STATUS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_appt_status_tbl;

  PROCEDURE p_create_cpt_chemo_tbl AS
   v_procname varchar2(100) := 'p_create_cpt_chemo_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_CHEMO_CPT(CPT_CODE VARCHAR2(25 BYTE)) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_CHEMO_CPT VALUES(96401)
INTO XDR_ACP_CHEMO_CPT VALUES(96402)
INTO XDR_ACP_CHEMO_CPT VALUES(96405)
INTO XDR_ACP_CHEMO_CPT VALUES(96406)
INTO XDR_ACP_CHEMO_CPT VALUES(96409)
INTO XDR_ACP_CHEMO_CPT VALUES(96411)
INTO XDR_ACP_CHEMO_CPT VALUES(96413)
INTO XDR_ACP_CHEMO_CPT VALUES(96415)
INTO XDR_ACP_CHEMO_CPT VALUES(96416)
INTO XDR_ACP_CHEMO_CPT VALUES(96417)
INTO XDR_ACP_CHEMO_CPT VALUES(96423)
INTO XDR_ACP_CHEMO_CPT VALUES(96420)
INTO XDR_ACP_CHEMO_CPT VALUES(96422)
INTO XDR_ACP_CHEMO_CPT VALUES(96425)
INTO XDR_ACP_CHEMO_CPT VALUES(96440)
INTO XDR_ACP_CHEMO_CPT VALUES(96446)
INTO XDR_ACP_CHEMO_CPT VALUES(96450) 
SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_CHEMO_CPT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_CHEMO_CPT', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_cpt_chemo_tbl;


    PROCEDURE p_create_appt_type_tbl AS
   v_procname varchar2(100) := 'p_create_appt_type_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_APPT_TYPE(PRC_ID VARCHAR2(50 BYTE)) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2001'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2009'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2000'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4640'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4639'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2858'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4641'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4653'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4945'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4642'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4201'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''1002'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4644'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4271'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''3499'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2014'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4652'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2848'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4655'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4657'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4848'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4654'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4626'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4605'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''3509'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2857'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4210'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4270'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''3826'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4599'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4645'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4272'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4849'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4628'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4625'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4630'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4481'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4627'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4209'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2015'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4280'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2214'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2850'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4704'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4281'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4699'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4700'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4701'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2856'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4631'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4273'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2855'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4702'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4482'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''5053'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''2851'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''4359'')
INTO XDR_ACP_APPT_TYPE(PRC_ID) VALUES(''3476'') 
SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_APPT_TYPE';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_APPT_TYPE', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;


    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_appt_type_tbl;



PROCEDURE p_create_clinic_tbl AS
   v_procname varchar2(100) := 'p_create_clinic_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_CLINICS(CLINIC_ID NUMBER(18,0),COORDINATOR_ID VARCHAR2(128 BYTE)) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7083,''MORRISSEY, KIRA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7000,''TAGAYUN, MARIE'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8082,''SPENCER BAEZ, RAYMOND'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8006,''LEGASPI, SHEILA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(1675,''RAMIREZ, SHARON'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6016,''KAUR, HARMANDEEP'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6017,''MEDINA, ARMANDO'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7084,''LOPEZ, CLAUDIA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8182,''AISPURO, VANESSA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7025,''VALENCIA, APRIL'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7083,''KAUR, HARMANDEEP'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8084,''SPENCER BAEZ, RAYMOND'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6000,''BASCOS, ELAINE'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7014,''AISPURO, VANESSA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7023,''FERNANDEZ, THEA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8151,''FERNANDEZ, THEA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(1846,''GARCIA, EVELYN'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6017,''CRAIGEN, SENITA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(1847,''LEGASPI, SHEILA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6017,''KWAN, ERIC'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8008,''AISPURO, VANESSA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7021,''AISPURO, VANESSA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7024,''LUA, PATRICIA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6017,''NOEL, KEVIN'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7011,''LANDAVERDE, LISETTE'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7008,''LUA, PATRICIA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8010,''LOPEZ, CLAUDIA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7007,''TROTTER, ALDOUS'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8002,''SANDOVAL, JESSICA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8022,''SPENCER BAEZ, RAYMOND'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7046,''RODRIGUEZ, DARLENE'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(7000,''KAUR, HARMANDEEP'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6020,''CRAIGEN, SENITA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6004,''MEDINA, ARMANDO'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8000,''TROTTER, ALDOUS'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(2455,''AISPURO, VANESSA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(8092,''GARCIA, EVELYN'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6016,''MORRISSEY, KIRA'')
INTO XDR_ACP_CLINICS (CLINIC_ID,COORDINATOR_ID) VALUES(6002,''BASCOS, ELAINE'') 
SELECT 1 FROM DUAL';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_CLINICS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_CLINICS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_clinic_tbl;



PROCEDURE p_create_adpolst_driver_tbl AS
   v_procname varchar2(100) := 'p_create_adpolst_driver_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_ADPOLST_DRV("DOC_INFO_TYPE_C" VARCHAR2(10),"DOC_GROUP" VARCHAR2(10)) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_ADPOLST_DRV VALUES(''11'',''AD'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''300052'',''AD'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''10'',''AD'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''200068'',''POLST'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''300058'',''POLST'') 
SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_ADPOLST_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ADPOLST_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_adpolst_driver_tbl;



PROCEDURE p_create_record_tbl AS
   v_procname varchar2(100) := 'p_create_record_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_RECORD_STATE("RECORD_STATE_C" NUMBER) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL  
                        INTO XDR_ACP_RECORD_STATE VALUES(2) 
                        SELECT 1 FROM DUAL';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_RECORD_STATE';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_RECORD_STATE', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;


    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_record_tbl;

PROCEDURE p_create_DOC_STATUS_tbl AS
   v_procname varchar2(100) := 'p_create_DOC_STATUS_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_DOC_STATUS("DOC_STAT_C" NUMBER) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT INTO XDR_ACP_DOC_STATUS  
SELECT DOC_STAT_C 
FROM ZC_DOC_STAT 
WHERE DOC_STAT_C = 35';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DOC_STATUS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DOC_STATUS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_DOC_STATUS_tbl;


PROCEDURE p_create_lab_drv_tbl AS
   v_procname varchar2(100) := 'p_create_lab_drv_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE "CTSI_RESEARCH"."XDR_ACP_LAB_DRV" 
--   (	"PROC_ID" NUMBER, 
--	"COMPONENT_ID" NUMBER, 
--	"LAB_CATEGORY" VARCHAR2(25 BYTE),
--    "LOINC_CODE" VARCHAR2(50 BYTE)
--   ) ON COMMIT PRESERVE ROWS';
--    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10020051, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327246, 12344, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 3000546, ''ALBUMIN'', ''30000-4'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(63243, 3000558, ''ALBUMIN'', ''13980-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10010264, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64643, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10010148, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(83974, 10010070, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721807, 12344, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35263, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10020019, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(878, 10010781, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90248, 10020059, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 3000506, ''CREATININE'', ''33558-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(886, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64650, 3001330, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35249, 3001330, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 3005214, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(76139, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35195, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725882, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725695, 10010148, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(109390, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(109498, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(44945, 10010068, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10000139, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90196, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721223, 10001346, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725942, 12312, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725882, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721306, 8011409, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98219, 10010159, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(76139, 10010070, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10000547, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35315, 10001348, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(41789, 10012733, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(3594, 10000138, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(103331, 3003922, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(44027, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(738, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90152, 3001397, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721328, 10010147, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(165000000, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(16500000, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303949, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304776, 10000353, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2647, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303671, 10010177, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303925, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1600, 3004916, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90248, 3002115, ''BILIRUBIN'', ''1977-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(680, 3000362, ''SODIUM'', ''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(245333, 3000378, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98223, 3000387, ''BILIRUBIN'', ''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1002, 3000468, ''ALBUMIN'', ''1747-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1012, 3000464, ''BILIRUBIN'', ''1974-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10020050, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(748, 3000387, ''BILIRUBIN'', ''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(780, 3000378, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64739, 10010068, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327246, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1750, 10001157, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64716, 3001475, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10010070, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90140, 3000578, ''ALBUMIN'', ''1754-1'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10010149, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10000549, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304770, 10001157, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(778, 3000456, ''CREATININE'', ''12190-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35337, 3003777, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90142, 3001478, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64650, 3001469, ''CREATININE'', ''3124-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(718411, 10000318, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35241, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90172, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(680, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(76139, 10010159, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303923, 10010069, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(16500000, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303949, 10011123, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(892, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303923, 10010801, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304864, 10011575, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(984, 10000319, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(102923, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304888, 10000140, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303729, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1600, 8001010, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(102923, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721217, 10000549, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(57423, 3004397, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(109390, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35351, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90196, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(752, 10000319, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303669, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(722366, 3003799, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(680, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35199, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(752, 3000389, ''BILIRUBIN'', ''15152-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(892, 3000362, ''SODIUM'', ''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327246, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10020018, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98221, 3000378, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327246, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721807, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10000322, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10000139, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 3000507, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 3000508, ''CREATININE'', ''20624-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(103151, 3001476, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(83974, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(780, 10000549, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35337, 3001330, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35373, 10010900, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35199, 3001478, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35361, 10010069, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303923, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(245307, 3003748, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(16500000, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(984, 10000322, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(16500000, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(23163, 10000140, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35195, 3001477, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35291, 10000552, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(892, 10020050, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303669, 10010177, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(724384, 8001010, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(85478, 10000319, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35241, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725683, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35315, 10012733, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35389, 3001478, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 3004847, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(680, 10020050, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64716, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(165000000, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35331, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(165000000, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(56264, 10000138, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 3000384, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 3000476, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(878, 3000614, ''ALBUMIN'', ''14338-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 3000387, ''BILIRUBIN'', ''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64643, 3000476, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10020000, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98223, 3000389, ''BILIRUBIN'', ''15152-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(63243, 3000563, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 10010640, ''CREATININE'', ''9318-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10000353, ''CREATININE'', ''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10000139, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64820, 3004074, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1804, 10000318, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327238, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35373, 10001992, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64716, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(83974, 10010264, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(89251, 3000465, ''BILIRUBIN'', ''29210-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35375, 3000489, ''SODIUM'', ''2956-1'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64643, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64643, 10010801, ''CREATININE'', ''13801-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304758, 10000323, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725882, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(10274, 1511105, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725683, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2647, 10010069, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(984, 10000321, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(76139, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(84070, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10000550, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10000353, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725789, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(738, 10000139, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(724384, 3004916, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10000549, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303679, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327250, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98219, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35375, 3005220, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90282, 3002195, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35361, 3000570, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(4962, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90202, 3001476, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327250, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(84130, 10010899, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(109506, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98223, 3005513, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303729, 10010148, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303661, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(738, 3000384, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 3000384, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35263, 3000476, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10010159, ''CREATININE'', ''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 3000362, ''SODIUM'', ''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 3000578, ''ALBUMIN'', ''1754-1'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1750, 10010540, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(686, 3000362, ''SODIUM'', ''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10010159, ''CREATININE'', ''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 3005194, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(752, 10020019, ''BILIRUBIN'', '''') 
SELECT 1 FROM DUAL'; 
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_LAB_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_LAB_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL  
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98221, 3000384, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10000322, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721807, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725866, 12344, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1804, 10010147, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(247602, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327238, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10020051, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327246, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303991, 10010147, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35249, 3003777, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305100, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90194, 3001475, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35361, 10000140, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(84130, 10011123, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64444, 3000578, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725683, 10010159, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305064, 10000323, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90196, 10000552, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725683, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(43991, 10000138, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(892, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(16500000, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725765, 10010540, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(76139, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12540, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12540, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725898, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725898, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35271, 3000415, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305116, 10000318, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(165000000, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10000549, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35203, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303729, 10010149, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(165000000, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35375, 10001992, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303665, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303665, 10010177, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90176, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303949, 10010900, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1042, 3000452, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(107496, 10000138, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1750, 3000122, ''INR'', ''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35361, 3000571, ''ALBUMIN'', ''13986-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(686, 3000378, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 3000378, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98221, 3000362, ''SODIUM'', ''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 10010639, ''ALBUMIN'', ''1754-1'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90140, 3000547, ''ALBUMIN'', ''14956-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10000319, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10020018, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10000353, ''CREATININE'', ''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10020000, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(738, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327238, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90196, 3001367, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(103339, 3003927, ''ALBUMIN'', ''1747-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 3000512, ''CREATININE'', ''2164-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721973, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305100, 10000353, ''CREATININE'', ''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725866, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(752, 10010148, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303989, 10010147, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90148, 3001330, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 10000550, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35361, 10010801, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305064, 10010149, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98219, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35195, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1804, 12312, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(748, 10020051, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(10274, 1511118, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(43967, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(44947, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 13269, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35361, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725683, 10010070, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1620, 3003794, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90202, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(107576, 10020100, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35315, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327250, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(60938, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64611, 3005214, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(109494, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90152, 3001396, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35199, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35297, 3001478, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1620, 1553372, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(42237, 10012831, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35197, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305064, 10000320, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90172, 3001361, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725695, 10000320, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 3000362, ''SODIUM'', ''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 3000378, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10010264, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 3000546, ''CREATININE'', ''30000-4'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35373, 3000472, ''SODIUM'', ''2955-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 10010640, ''ALBUMIN'', ''9318-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35375, 3000490, ''SODIUM'', ''21525-1'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10000549, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1750, 10020029, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327246, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35263, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88078, 3004056, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64588, 10001346, ''ALBUMIN'', ''14957-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 3000508, ''CREATININE'', ''20624-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 12344, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98221, 3000387, ''BILIRUBIN'', ''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 3000507, ''CREATININE'', ''2162-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327238, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88078, 3001261, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(780, 10010264, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(83974, 10010898, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(83974, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(886, 10000138, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88078, 3004005, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(85478, 10000322, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(84130, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305064, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35269, 3001382, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725882, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35197, 3003777, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(16500000, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(85478, 10000139, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327256, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(210306, 8011409, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725789, 10011277, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303925, 10010801, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(748, 10000322, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304776, 10000549, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90194, 10010268, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12344, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(56565, 10010147, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721985, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(41801, 10010070, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(56565, 10000318, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(748, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35351, 3001330, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(41801, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(738, 10020000, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35315, 10001346, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10010265, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303661, 10010159, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303991, 10000318, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(718411, 10001157, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 3005513, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35311, 10000552, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327238, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725789, 10011278, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35261, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725898, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88991, 10010159, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(22961, 3000476, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(21415, 3000476, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305064, 10010148, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(98223, 3000384, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 3000389, ''BILIRUBIN'', ''15152-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(688, 3000387, ''BILIRUBIN'', ''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(686, 3000384, ''ALBUMIN'', ''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10010070, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(682, 10001991, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(678, 10020050, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64716, 3001330, ''CREATININE'', ''2161-8'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304672, 10000318, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721807, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721807, 12292, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(305100, 10000549, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721973, 10000322, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327238, 12344, ''CREATININE'', ''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(63464, 3004461, ''ALBUMIN'', ''6942-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(1752, 3004475, ''INR'', ''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(63464, 3000571, ''ALBUMIN'', ''13986-5'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(83974, 10010159, ''CREATININE'', ''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(303671, 10010266, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(721263, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725922, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(76139, 10010067, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(304758, 10010150, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(109390, 10010159, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(90308, 3000434, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(725683, 10010264, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327261, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327252, 12378, ''INR'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35375, 10010899, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2126, 12418, ''SODIUM'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(102923, 10010269, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(2647, 10010801, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(88078, 3005203, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(878, 10001819, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64575, 10000551, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327250, 12311, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(780, 10020018, ''CREATININE'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35227, 10000140, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(64444, 10010639, ''ALBUMIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(327250, 12313, ''BILIRUBIN'', '''')
INTO XDR_ACP_LAB_DRV(PROC_ID, COMPONENT_ID, LAB_CATEGORY, LOINC_CODE)VALUES(35249, 10010269, ''CREATININE'', '''') 
SELECT 1 FROM DUAL'; 
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_LAB_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_LAB_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_lab_drv_tbl;



PROCEDURE p_create_rnd_arm_tbl AS
   v_procname varchar2(100) := 'p_create_rnd_arm_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

    --Create table 
    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE "CTSI_RESEARCH"."XDR_ACP_RANDOMIZATION" 
   (	"CLINIC_ID" NUMBER, 
	"ARM" NUMBER
   ) ON COMMIT PRESERVE ROWS';
    commit;   

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8000,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8182,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1891,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1930,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1890,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1892,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1887,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8002,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8006,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8008,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(4545,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(4750,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8150,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8010,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8022,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1847,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8085,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1675,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7008,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7023,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7024,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7011,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7046,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7000,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7059,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7025,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7007,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7021,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(7084,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8151,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8084,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8092,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(1846,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8184,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(8082,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(2455,2)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(6017,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(6016,1)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(6004,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(6000,3)
                            INTO XDR_ACP_RANDOMIZATION(CLINIC_ID,ARM) VALUES(6002,3) 
                        SELECT 1 FROM DUAL';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_RANDOMIZATION';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_RANDOMIZATION', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_rnd_arm_tbl;

  procedure p_acp_create_denominator(p_cohort_table in varchar2, p_dept_driver_table in varchar2, p_appt_driver_table in varchar2)  as
 q1 varchar2(4000);
    v_procname varchar2(100) := 'p_acp_create_denominator';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

 q1 := 'INSERT INTO ' || p_cohort_table  || '(PAT_ID,current_age, CREATION_DATE,CUR_PCP_PROV_ID, LANGUAGE_C)  
        SELECT DISTINCT x.pat_id 
                    ,FLOOR(MONTHS_BETWEEN(TRUNC(sysdate),TRUNC(pat.BIRTH_DATE))/12) AS CURRENT_AGE 
            ,SYSDATE AS CREATION_DATE 
            ,pat.CUR_PCP_PROV_ID 
            ,pat.LANGUAGE_C 
        FROM (SELECT enc.pat_id 
                    ,PAT.BIRTH_DATE 
            ,count(enc.pat_enc_csn_id) AS pat_enc_count 
        FROM clarity.pat_enc                        enc 
        JOIN clarity.patient                        pat   ON enc.pat_id = pat.pat_id 
        LEFT JOIN ' || p_cohort_table || '  coh   ON pat.pat_id = coh.pat_id and coh.pat_id IS NULL 
        JOIN clarity.clarity_ser                    prov2 ON pat.cur_pcp_prov_id = prov2.PROV_ID   
                                                    AND prov2.user_id IS NOT NULL 
        JOIN ' || p_dept_driver_table || '      dd on enc.department_id = dd.department_id 
        WHERE  
                enc.effective_date_dt between sysdate - 366 and sysdate 
                and floor(months_between(TRUNC(sysdate), pat.birth_date)/12) >= 18 
                and enc.enc_type_c = 101 
                and (enc.appt_status_c is not null and enc.appt_status_c not in (SELECT APPT_STATUS_C 
                                                                                FROM ' || p_appt_driver_table || '
                                                                                WHERE appt_cat = ''exclude'') 
                    )  
                GROUP BY enc.PAT_ID, 
                    PAT.BIRTH_DATE)x 
        JOIN clarity.patient                        pat   ON x.pat_id = pat.pat_id 
        WHERE x.pat_enc_count > 1';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Create cohort table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_create_denominator;

procedure p_acp_remove_deceased(p_cohort_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_remove_deceased';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'DELETE FROM ' || p_cohort_table  ||
        ' WHERE pat_id IN 
            (SELECT DISTINCT coh.PAT_ID 
            FROM ' || p_cohort_table  || '     coh 
            JOIN patient            pat on coh.pat_id = pat.pat_id 
            WHERE 
                --coh.SELECTED IS NULL 
                 i2b2.f_death(pat.pat_id,2,1)  = ''Known Deceased'')';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Delete not already selected deceased patients');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_remove_deceased;

procedure p_acp_exclude_deceased(p_cohort_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_exclude_deceased';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
SELECT DISTINCT coh.PAT_ID 
            FROM ' || p_cohort_table  || '     coh 
            JOIN patient            pat on coh.pat_id = pat.pat_id 
            WHERE 
                i2b2.f_death(pat.pat_id,2,1)  = ''Known Deceased'' 
                and coh.EXCLUDED IS NULL 
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.EXCLUDED = 1
 ,coh.EXCLUSION_DATE = SYSDATE
 ,coh.UPDATE_DATE = SYSDATE
 ,coh.EXCLUSION_REASON = ''patient deceased''
' ;

 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where EXCLUSION_REASON = ''patient deceased''';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Exclude already selected and newly deceased patients');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end p_acp_exclude_deceased;


procedure p_acp_remove_restricted(p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_remove_restricted';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

  q1 := 'DELETE FROM ' || p_cohort_table  ||
        ' WHERE pat_id IN 
            (SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh 
                JOIN patient_fyi_flags           flags ON coh.pat_id = flags.patient_id 
                JOIN ' || p_driver_table || '     st   on flags.PAT_FLAG_TYPE_C = st.PAT_FLAG_TYPE_C 
                UNION 
                SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh 
                LEFT JOIN patient_3                         ON coh.pat_id = patient_3.pat_id 
                WHERE 
                    patient_3.is_test_pat_yn = ''Y'')';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Delete not already selected restricted patients');

      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_remove_restricted;


procedure p_acp_exclude_restricted(p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_exclude_restricted';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
 SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh 
                JOIN patient_fyi_flags           flags ON coh.pat_id = flags.patient_id 
                left JOIN ' || p_driver_table || '      st   on flags.PAT_FLAG_TYPE_C = st.PAT_FLAG_TYPE_C 
--                                left JOIN I2B2.LZ_CLARITY_PATIENT PAT ON COH.PAT_ID = PAT.PAT_ID
                WHERE (flags.PAT_FLAG_TYPE_C is null OR st.PAT_FLAG_TYPE_C IS NOT NULL)
                and coh.EXCLUDED IS NULL    --20
                UNION 
                SELECT coh.pat_id 
                FROM ' || p_cohort_table ||'                   coh 
                JOIN patient_3                         ON coh.pat_id = patient_3.pat_id 
--                                left JOIN I2B2.LZ_CLARITY_PATIENT PAT ON COH.PAT_ID = PAT.PAT_ID
                WHERE 
                    (patient_3.pat_id is null 
                    OR patient_3.is_test_pat_yn = ''Y'' 
                    OR patient_3.is_test_pat_yn <> ''N'') 
                and coh.EXCLUDED IS NULL        --0
                UNION
                SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh
                JOIN patient_2 on coh.pat_id = patient_2.pat_id
                WHERE
                  patient_2.PAT_CONF_NM_REC_ID  is NOT null
                  and coh.EXCLUDED IS NULL        --16
                UNION
                SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh
                JOIN patient P on coh.pat_id = P.pat_id
                WHERE
                      (p.pat_mrn_id LIKE ''<%>'' 
                      OR  p.pat_mrn_id LIKE ''99%''  
                      OR  p.pat_mrn_id LIKE ''%Z%''
                      OR p.birth_date is  NULL
                      OR  P.PAT_NAME  LIKE ''%dummy%'' 
                      OR  (P.pat_last_name || P.PAT_FIRST_NAME || P.PAT_MIDDLE_NAME) LIKE ''%dummy%''
                      OR P.PAT_NAME  LIKE ''TR-%''  
                      OR  P.PAT_NAME  LIKE ''YY%'' 
                      OR P.PAT_NAME LIKE ''ZZ%''
                      OR p.restricted_yn = ''Y''
                      )and coh.EXCLUDED IS NULL        --0
               UNION
                SELECT coh.pat_id 
                FROM ' || p_cohort_table ||'                   coh
                JOIN (Select Distinct PAC.PAT_ID,Acct.CONF_NAM_OF_ASSC_PT  From PAT_ACCT_CVG PAC
              Join ACCOUNT Acct on Acct.ACCOUNT_ID = PAC.ACCOUNT_ID
              Where Acct.CONF_NAM_OF_ASSC_PT IS NOT NULL
              ) cnfgtor on COH.pat_id = cnfgtor.pat_id      
                WHERE  coh.EXCLUDED IS NULL    
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.EXCLUDED = 1
 ,coh.EXCLUSION_DATE = SYSDATE
 ,coh.UPDATE_DATE = SYSDATE
 ,coh.EXCLUSION_REASON = ''patient restricted''
' ;

 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where EXCLUSION_REASON = ''patient deceased''';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
            INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Exclude already selected and newly restricted patients');
      commit;    
      EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_exclude_restricted;


procedure P_ACP_PL_DX_TBL(p_table_name  in varchar2, p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_PL_DX_TBL';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 
    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_PL_DX(PAT_ID VARCHAR2(18 BYTE),DX_FLAG VARCHAR2(25 BYTE)) ON COMMIT PRESERVE ROWS';
    COMMIT;

    EXECUTE IMMEDIATE  'create index XDR_ACP_PL_DX_id_patdx_flag on XDR_ACP_PL_DX(pat_id,DX_FLAG)';
    COMMIT;

  q1 := 'INSERT INTO ' || p_table_name || ' 
                SELECT coh.pat_id, drv.dx_flag 
                FROM ' || p_cohort_table  || '          coh  
                JOIN problem_list                     pl    ON coh.pat_id = pl.pat_id AND pl.rec_archived_yn = ''N'' 
                JOIN zc_problem_status                zps   ON pl.problem_status_c = zps.problem_status_c 
                JOIN ' || p_driver_table ||'   drv   ON pl.dx_id = drv.dx_id 
  where  
        zps.name = ''Active'' 
        AND coh.SELECTED IS NULL';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_PL_DX';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PL_DX', sysdate, v_audit_cnt,v_procname,'Pull problem list records for patients in denominator');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_PL_DX_TBL;



 procedure P_ACP_PL_DX(p_cohort_table in varchar2, p_table_name in varchar2, p_dx_flag in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'P_ACP_PL_DX';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || 
  ' SET PL_' || p_dx_flag || ' = 1 
  WHERE 
    SELECTED IS NULL 
    AND PAT_ID IN ( 
                SELECT DISTINCT pat_id 
                FROM ' || p_table_name  || '          
               WHERE dx_flag = ''' || p_dx_flag || ''' 
               )';
 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where PL_' || p_dx_flag || ' = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PL_DX', sysdate, v_audit_cnt,v_procname,p_dx_flag);
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_PL_DX;

procedure P_ACP_PL_ESDL_DECOMPENSATION(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_PL_ESDL_DECOMPENSATION';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := '
  UPDATE ' || p_cohort_table  || 
  ' SET pl_ESDL_decompensation = 1 
  WHERE  
        SELECTED IS NULL
        AND (PL_PERITONITIS = 1 
        OR PL_ASCITES = 1 
        OR PL_BLEEDING = 1 
        OR PL_ENCEPHALOPATHY = 1 
        OR PL_HEPATORENAL = 1)';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_PL_DX where pl_ESDL_decompensation = 1 ';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PL_DX', sysdate, v_audit_cnt,v_procname,'pl_ESDL_decompensation');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_PL_ESDL_DECOMPENSATION;


procedure P_ACP_ENC_DX_TBL(p_table_name  in varchar2, p_cohort_table in varchar2, p_driver_table in varchar2, p_timeframe in number) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ENC_DX_TBL';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 
    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_ENC_DX(PAT_ID VARCHAR2(18 BYTE),DX_FLAG VARCHAR2(25 BYTE)) ON COMMIT PRESERVE ROWS';
    COMMIT;

    EXECUTE IMMEDIATE  'create index XDR_ACP_ENC_DX_id_patdx_flag on XDR_ACP_ENC_DX(pat_id,DX_FLAG)';
    COMMIT;

   q1 := 'INSERT INTO ' || p_table_name || ' 
                SELECT coh.pat_id, drv.dx_flag
                FROM ' || p_cohort_table  || '          coh 
                JOIN pat_enc_dx                     dx on coh.pat_id = dx.pat_id 
                JOIN ' || p_driver_table ||'    drv   ON dx.dx_id = drv.dx_id 
                left join pat_enc                   enc on dx.pat_enc_csn_id = enc.pat_enc_csn_id 
                WHERE 
                    coh.SELECTED IS NULL
                    AND dx.CONTACT_DATE between sysdate - (365.25 * ' || p_timeframe || ') and sysdate 
                    AND enc.enc_type_c = 101';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_ENC_DX';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ENC_DX', sysdate, v_audit_cnt,v_procname,'Pull encounter diagnoses for patients in the denominator');

      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_ENC_DX_TBL;


procedure P_ACP_DX_ESDL_DECOMPENSATION(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DX_ESDL_DECOMPENSATION';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := '
  UPDATE ' || p_cohort_table  || 
  ' SET DX_ESDL_decompensation = 1 
  WHERE  
        SELECTED IS NULL
        AND (DX_PERITONITIS = 1 
        OR DX_ASCITES = 1 
        OR DX_BLEEDING = 1 
        OR DX_ENCEPHALOPATHY = 1 
        OR DX_HEPATORENAL = 1 
        OR DX_PERITONITIS = 1)';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_PL_DX where dx_ESDL_decompensation = 1 ';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ENC_DX', sysdate, v_audit_cnt,v_procname,'dx_ESDL_decompensation');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end P_ACP_DX_ESDL_DECOMPENSATION;


--------------------------------------
--apply encounter dx criterion (3 years)
--------------------------------------
procedure P_ACP_ENC_DX(p_cohort_table in varchar2, p_dx_table in varchar2, p_dx_flag in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ENC_DX';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

begin
   DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 
   
 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET DX_' || p_dx_flag || ' = 1 
  WHERE 
    SELECTED IS NULL 
    AND PAT_ID IN ( 
                SELECT DISTINCT dx.pat_id 
                FROM ' || p_dx_table ||'    dx    
                WHERE dx.dx_flag = ''' || p_dx_flag || ''' )';
EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
  v_qry_str := 'select COUNT(*) from XDR_ACP_Enc_DX where DX_' || p_dx_flag || ' = 1';
    

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
         INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ENC_DX', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_dx_flag);
               commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_ENC_DX;

procedure p_acp_flag_pat_with_dxpl(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'p_acp_flag_pat_with_dxpl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  ||
        ' SET NO_DXPL = 1 
          WHERE 
                PL_ALS IS NULL
                AND PL_CANCER IS NULL
                AND PL_CHF IS NULL
                AND PL_CIRRHOSIS IS NULL
                AND PL_COPD IS NULL
                AND PL_COPD_SPO2 IS NULL
                AND PL_ESLD IS NULL
                AND PL_ESDL_decompensation IS NULL               
                AND PL_ESRD IS NULL
                AND DX_ALS IS NULL               
                AND DX_CANCER IS NULL
                AND DX_CHF IS NULL
                AND DX_CIRRHOSIS IS NULL
                AND DX_COPD IS NULL
                --AND DX_COPD_SPO2 IS NULL
                --AND DX_ESLD IS NULL
                AND DX_ESDL_DECOMPENSATION IS NULL
                AND DX_ESRD IS NULL
                AND DX_ESRD IS NULL
            )';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT WHERE NO_DXPL IS NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Patients with at leat one dx code (encounter or PL)');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_flag_pat_with_dxpl;


procedure P_ACP_DEPT_VISIT_ONC(p_cohort_table in varchar2, p_dept in varchar2, p_years in number, p_criteria in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DEPT_VISIT_ONC';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ' || p_dept || '_VISIT = 1  
  WHERE  
    SELECTED IS NULL 
    AND PAT_ID IN ( 
                SELECT DISTINCT  coh.PAT_ID 
FROM ' || p_cohort_table  || '          coh 
JOIN clarity.PAT_ENC                            enc on coh.pat_id = enc.pat_id 
LEFT JOIN clarity.CLARITY_DEP                   dep ON enc.department_id = dep.department_id 
LEFT JOIN clarity.v_cube_d_provider             prv ON enc.visit_prov_id = prv.provider_id 
WHERE 
    (coh.PL_' || p_criteria || ' = 1 OR coh.DX_' || p_criteria || ' = 1) 
    AND 
            (REGEXP_LIKE(dep.specialty,''' || p_dept || ''',''i'') 
            OR 
            REGEXP_LIKE(prv.primary_specialty,''' || p_dept || ''',''i'') 
            ) 
    and enc.enc_type_c = 101 
    AND enc.EFFECTIVE_DATE_DT between sysdate - (365.25 * '|| p_years ||' ) AND sysdate
    )';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ' || p_dept || '_VISIT = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_dept || '_VISIT = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_DEPT_VISIT_ONC;

procedure P_ACP_DEPT_VISIT_NEPH(p_cohort_table in varchar2, p_dept in varchar2, p_years in number, p_criteria in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DEPT_VISIT_NEPH';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ' || p_dept || '_VISIT = 1  
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN ( 
                SELECT DISTINCT  coh.PAT_ID 
FROM ' || p_cohort_table  || '          coh 
JOIN clarity.PAT_ENC                            enc on coh.pat_id = enc.pat_id 
LEFT JOIN clarity.CLARITY_DEP                   dep ON enc.department_id = dep.department_id 
LEFT JOIN clarity.v_cube_d_provider             prv ON enc.visit_prov_id = prv.provider_id 
WHERE   
    (coh.PL_' || p_criteria || ' = 1 OR coh.DX_' || p_criteria || ' = 1) 
    AND 
            (REGEXP_LIKE(dep.specialty,''' || p_dept || ''',''i'') 
            OR 
            REGEXP_LIKE(prv.primary_specialty,''' || p_dept || ''',''i'') 
            ) 
    AND enc.EFFECTIVE_DATE_DT between sysdate - (365.25 * '|| p_years ||' ) AND sysdate
    )';
 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ' || p_dept || '_VISIT = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
          INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_dept || '_VISIT = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_DEPT_VISIT_NEPH;

procedure P_ACP_DEPT_ADMIT(p_cohort_table in varchar2, p_driver_table in varchar2, p_years in number, p_criteria in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DEPT_ADMIT';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ' || p_criteria || '_ADMIT = 1 
  WHERE 
    SELECTED IS NULL
    AND PAT_ID IN ( 
                SELECT DISTINCT  coh.PAT_ID 
                FROM ' || p_cohort_table  || '          coh 
                JOIN pat_enc_hsp                     enc ON coh.pat_id = enc.pat_id 
                JOIN pat_enc_dx                      dx ON enc.pat_enc_csn_id = dx.pat_enc_csn_id 
                join ' || p_driver_table ||'  drv on dx.dx_id = drv.dx_id AND drv.DX_FLAG = ''' || p_criteria || ''' 
                WHERE   
                    (coh.PL_' || p_criteria || ' = 1 OR COH.DX_' || p_criteria || ' = 1) 
                    AND dx.contact_date between sysdate - (365.25 * '|| p_years ||' ) AND sysdate
                    )';
 EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ' || p_criteria || '_ADMIT = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_criteria || '_ADMIT = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_DEPT_ADMIT;

procedure P_ACP_CHEMO_PROC(p_cohort_table in varchar2, p_driver_table  in varchar2, p_timeframe in number) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_CHEMO_PROC';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET CHEMO = 1  
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN (      
        SELECT coh.pat_id 
          FROM ' || p_cohort_table  || '           coh 
          JOIN pat_enc                  enc on coh.pat_id = enc.pat_id 
          JOIN arpb_transactions                  cpt  ON enc.pat_enc_csn_id = cpt.pat_enc_csn_id  
          join ' || p_driver_table  || '                  drv on cpt.cpt_code = drv.cpt_code 
        WHERE 
            (coh.PL_CANCER = 1 OR COH.DX_CANCER = 1) 
            AND TRUNC(enc.EFFECTIVE_DATE_DT ) BETWEEN sysdate - (365.25 * ' || p_timeframe || ') AND sysdate 
        UNION 
        SELECT coh.pat_id 
          FROM ' || p_cohort_table  || '          coh 
          join hsp_account                     acc on coh.pat_id = acc.pat_id  
          JOIN HSP_TRANSACTIONS                  tx  ON acc.HSP_ACCOUNT_ID = tx.HSP_ACCOUNT_ID  
          JOIN pat_enc                          enc on tx.pat_enc_csn_id = enc.pat_enc_csn_id 
          join ' || p_driver_table  || '                  drv on tx.cpt_code = drv.cpt_code 
        WHERE 
            (coh.PL_CANCER = 1 OR COH.DX_CANCER = 1) 
            AND TRUNC(enc.EFFECTIVE_DATE_DT ) BETWEEN sysdate - (365.25 * ' || p_timeframe || ') AND sysdate)';


EXECUTE IMMEDIATE q1; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CHEMO = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CHEMO medications');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end P_ACP_CHEMO_PROC;


procedure P_ACP_CHEMO_MEDS(p_cohort_table in varchar2, p_med_keyword  in varchar2, p_timeframe in number) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_CHEMO_MEDS';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET CHEMO = 1  
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN (      
        SELECT DISTINCT  med1.pat_id 
        FROM ( 
        SELECT  m.pat_id, 
            m.order_med_id,  
          case when m.medication_id != 800001 then m.medication_id 
               else coalesce(omi.dispensable_med_id, m.user_sel_med_id) end as used_med_id,        
            zom.name as ordering_mode, 
            zoc.name as order_class 
        FROM ' || p_cohort_table  || '      coh 
        JOIN order_med                      m   ON coh.pat_id = m.pat_id 
        LEFT JOIN order_medinfo omi on m.order_med_id = omi.order_med_id 
        left join zc_order_class zoc on m.order_class_C = zoc.order_class_c 
        left join zc_ordering_mode zom on m.ordering_mode_c = zom.ordering_mode_c 
        WHERE  
            coh.SELECTED IS NULL 
            AND (coh.PL_CANCER = 1 OR COH.DX_CANCER = 1) 
            AND TRUNC(m.ordering_date) BETWEEN sysdate - (365.25 * ' || p_timeframe ||') AND sysdate 
            and zoc.name <> ''Historical Med'' 
    ) med1 
LEFT JOIN clarity_medication cm on med1.used_med_id = cm.medication_id 
LEFT JOIN mar_admin_info  mar   ON med1.order_med_id = mar.order_med_id 
LEFT JOIN zc_mar_rslt     xmrs  ON mar.mar_action_c = xmrs.result_c 
WHERE 
  (
  (med1.ordering_mode = ''Inpatient''                                       
            AND nvl(mar.taken_time,to_date(''01/01/0001'')) <> ''01/01/0001''       -- taken_time was valid
            AND nvl(mar.sig,-1) > 0                                             -- and SIG was valid and > 0
            AND nvl(mar.mar_action_c,-1) <> 125                                 -- and action was anything other than ''Not Given''
         ) 
         OR med1.ordering_mode != ''Inpatient'' 
        )
    AND med1.used_med_id IS NOT NULL 
    AND (
        cm.pharm_subclass_c in (2150)  
        or regexp_like(cm.name,''' || p_med_keyword || ''',''i'') 
        or regexp_like(cm.generic_name,''' || p_med_keyword || ''',''i'') 
    )
    )';

EXECUTE IMMEDIATE q1; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CHEMO = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CHEMO CPT');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_CHEMO_MEDS;

procedure P_ACP_LAB_PULL(p_table_name in varchar2, p_cohort_table in varchar2, p_driver_table  in varchar2, p_timeframe in number) as
 q1 varchar2(6000);
 q2 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_LAB_PULL';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 
    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_LAB(
--    PAT_ID VARCHAR2(18 BYTE), 
--	PAT_ENC_CSN_ID NUMBER(18,0), 
--	PROC_CODE VARCHAR2(91 BYTE), 
--	COMPONENT_ID NUMBER(18,0), 
--	RESULT_TIME DATE, 
--	LAB_FLAG VARCHAR2(50 BYTE),
--	HARM_NUM_VAL NUMBER
--    ) 
-- ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   

 q1 := 'INSERT INTO ' || p_table_name || '(PAT_ID,PAT_ENC_CSN_ID,PROC_CODE,COMPONENT_ID, RESULT_TIME, LAB_FLAG, HARM_NUM_VAL) 
     SELECT 	DISTINCT coh.pat_id, 
                o.pat_enc_csn_id, 
                p.proc_code, 
                o.component_id, 
                p.result_time, 
                drv.LAB_CATEGORY as LAB_FLAG, 
                CASE WHEN REGEXP_LIKE(o.ord_value,'':'',''i'') or REGEXP_SUBSTR(o.ord_value,''[1-9]\d*(\.\,\d+)?'') IS NULL 
                       THEN o.ord_num_value 
                  WHEN REGEXP_LIKE(o.ord_value,''[<>]=*'',''i'') 
                       THEN TO_NUMBER(REGEXP_SUBSTR(o.ord_value,''-?[[:digit:],.]*$''),''9999999999D9999999999'', ''NLS_NUMERIC_CHARACTERS = ''''.,'''''' ) 
                  WHEN REGEXP_LIKE(o.ord_value,''%'',''i'')  
                       THEN TO_NUMBER(REGEXP_SUBSTR(o.ord_value,''[1-9]\d*(\.\,\d+)?''),''9999999999D9999999999'', ''NLS_NUMERIC_CHARACTERS = ''''.,'''''' )   
                  ELSE o.ord_num_value END as harm_num_val                       
      FROM order_results                o 
      JOIN order_proc                   p   ON p.order_proc_id = o.order_proc_id 
      JOIN ' || p_cohort_table  || '    coh ON p.pat_id = coh.pat_id AND (coh.PL_CIRRHOSIS = 1 OR COH.DX_CIRRHOSIS = 1) AND coh.SELECTED IS NULL 
      JOIN ' || p_driver_table  || '    drv ON p.proc_id = drv.proc_id and o.component_id = drv.component_id 
      JOIN order_proc_2                 op2 ON p.ORDER_PROC_ID = op2.ORDER_PROC_ID  
      JOIN clarity_component            cc  ON o.component_id = cc.component_id 
      LEFT JOIN lnc_db_main             ldm ON cc.DEFAULT_LNC_ID = ldm.record_id  
      WHERE    
              p.order_type_c IN (7) 
              AND o.ord_value IS NOT NULL 
              AND o.order_proc_id IS NOT NULL 
              AND p.order_time BETWEEN SYSDATE - (365.25 * ' || p_timeframe || ') AND SYSDATE';

q2 := 'CREATE INDEX ' || p_table_name || '_IX_RSLT_FLAG ON ' || p_table_name || '(result_time,LAB_FLAG)';

EXECUTE IMMEDIATE q1;
--EXECUTE IMMEDIATE q2;

   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_table_name;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values (p_table_name, sysdate, v_audit_cnt,v_procname,'Pull lab records for cohort population');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_LAB_PULL;


procedure P_ACP_LAB_MELD_TABLE( p_lab_table in varchar2, p_meld_table in varchar2) as
 q1 varchar2(8000);
  v_procname varchar2(100) := 'P_ACP_LAB_MELD_TABLE';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Create table 
    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_MELD_TABLE ("PAT_ID" VARCHAR2(18 BYTE)
       ,"BILIRUBIN" NUMBER
       ,"BILIRUBIN_RESULT_TIME" DATE
       ,"CREATININE" NUMBER
       ,"CREATININE_RESULT_TIME" DATE
       ,"INR" NUMBER
       ,"INR_RESULT_TIME" DATE
       ,"LATEST_LAB" DATE
       ,"SODIUM" NUMBER
       ,"SODIUM_RESULT_TIME" DATE
   )  
 ON COMMIT PRESERVE ROWS'
    ;
    commit;   


q1 :=  'INSERT INTO ' || p_meld_table  || ' (PAT_ID,BILIRUBIN,BILIRUBIN_RESULT_TIME,CREATININE,CREATININE_RESULT_TIME,INR,INR_RESULT_TIME,LATEST_LAB,SODIUM,SODIUM_RESULT_TIME)
select pat_id
        ,BILIRUBIN
        ,BILIRUBIN_RESULT_TIME
        ,CREATININE
        ,CREATININE_RESULT_TIME
        ,INR
        ,INR_RESULT_TIME
        ,LATEST_LAB
        ,SODIUM
        ,SODIUM_RESULT_TIME
from (
        select pat_id
                ,BILIRUBIN
                ,BILIRUBIN_RESULT_TIME
                ,CREATININE
                ,CREATININE_RESULT_TIME
                ,MIN(ABS(LATEST_LAB - CREATININE_RESULT_TIME)) OVER (partition by pat_id) as last_creatinine
                ,ABS(LATEST_LAB - CREATININE_RESULT_TIME) as DIFF_CREATININE
                ,INR
                ,INR_RESULT_TIME
                ,MIN(ABS(LATEST_LAB - INR_RESULT_TIME)) OVER (partition by pat_id) as last_inr
                ,ABS(LATEST_LAB - INR_RESULT_TIME) as DIFF_INR
                ,LATEST_LAB
                ,SODIUM
                ,SODIUM_RESULT_TIME
                ,MIN(ABS(LATEST_LAB - SODIUM_RESULT_TIME)) OVER (partition by pat_id) as last_sodium
                ,ABS(LATEST_LAB - SODIUM_RESULT_TIME) as DIFF_SODIUM
        from (select * from (
            select DISTINCT x.PAT_ID
                                ,x.BILIRUBIN
                                ,x.BILIRUBIN_result_time
                                ,x.INR
                                ,x.INR_result_time
                                ,x.diff_INR
                                ,x.CREATININE
                                ,x.CREATININE_result_time
                                ,x.diff_creatinine
                                ,x.SODIUM
                                ,x.SODIUM_result_time
                                ,x.diff_SODIUM
                                ,MAX(x.BILIRUBIN_result_time) OVER (PARTITION BY x.PAT_ID) AS LATEST_LAB
             from (
                     SELECT DISTINCT bili.PAT_ID
                                        ,bili.result_time as BILIRUBIN_result_time
                                        ,bili.harm_num_val as BILIRUBIN
                                        ,inr.INR
                                        ,inr.INR_result_time
                                        ,ABS(bili.result_time - inr.INR_result_time) as diff_INR
                                        ,cr.CREATININE
                                        ,cr.CREATININE_result_time
                                        ,ABS(bili.result_time - cr.CREATININE_result_time) as diff_creatinine
                                        ,sod.SODIUM
                                        ,sod.SODIUM_result_time
                                        ,ABS(bili.result_time - sod.SODIUM_result_time) as diff_sodium
                                    FROM ' || p_lab_table || ' bili
                                    JOIN (SELECT DISTINCT lab.PAT_ID
                                                ,lab.result_time as INR_result_time
                                                ,lab.harm_num_val as INR
                                            FROM ' || p_lab_table || ' lab
                                            WHERE LAB.LAB_FLAG = ''INR'' AND lab.harm_num_val <> 9999999) inr on bili.pat_id = inr.pat_id and (bili.result_time - inr.INR_result_time) between -1 and 1
                                    JOIN (SELECT DISTINCT lab.PAT_ID
                                                ,lab.result_time as CREATININE_result_time
                                                ,lab.harm_num_val as CREATININE
                                            FROM ' || p_lab_table || ' lab
                                            WHERE LAB.LAB_FLAG = ''CREATININE'' AND lab.harm_num_val <> 9999999) cr on bili.pat_id = cr.pat_id and (bili.result_time - cr.CREATININE_result_time) between -1 and 1                        
                                    JOIN (SELECT DISTINCT lab.PAT_ID
                                                ,lab.result_time as SODIUM_result_time
                                                ,lab.harm_num_val as SODIUM
                                            FROM ' || p_lab_table || ' lab
                                            WHERE LAB.LAB_FLAG = ''SODIUM'' AND lab.harm_num_val <> 9999999) sod on bili.pat_id = sod.pat_id and (bili.result_time - sod.SODIUM_result_time) between -1 and 1                        
                                    WHERE bili.LAB_FLAG = ''BILIRUBIN'' AND bili.harm_num_val <> 9999999                
                            ) x
                            )
                            where LATEST_LAB = BILIRUBIN_result_time
                            )
        )x
where 
diff_inr = last_inr
and diff_sodium = last_sodium
and diff_creatinine = last_creatinine';
EXECUTE IMMEDIATE q1; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_meld_table;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
          INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values (p_meld_table, sysdate, v_audit_cnt,v_procname,'Pull meld related records from lab records');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_LAB_MELD_TABLE;


procedure P_ACP_MELD(p_cohort_table in varchar2, p_lab_table in varchar2) as
 q1 varchar2(6000);
  v_procname varchar2(100) := 'P_ACP_MELD';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || 
  ' SET MELD = 1 
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN ( 
                    select DISTINCT pat_id 
                    from ( 
                            select pat_id 
                                    ,round( 
                                    ( 
                                        (0.378 * ln(Bilirubin)) + (1.120 * ln(INR)) + ((0.957 * ln(Creatinine)) + 0.643) 
                                    ) * 10 
                                    ,1) as meld 
                                ,sodium 
                                ,Bilirubin 
                                ,creatinine 
                                ,inr 
                    from( 
                        select  
                                labs.pat_id 
                                ,labs.Bilirubin 
                                ,labs.INR 
                                ,case when labs.Creatinine > 4.0 or dia.pat_id is not null then 4.0 
                                    else labs.Creatinine 
                                    end Creatinine                 
                                ,case when labs.sodium > 137 then 137 
                                    when labs.sodium < 125 then 125 
                                    else labs.sodium 
                                    end sodium 
                        from '  || p_cohort_table  || '     coh 
                        JOIN  ' || p_lab_table || '                   LABS ON COH.PAT_ID = LABS.PAT_ID 
                        left join (select pat_id, CREATININE_result_time 
                                    from ( 
                                        select lab.pat_id 
                                                ,lab.CREATININE_result_time 
                                                ,count(dia.contact_date) dialysis_count 
                                        from  ' || p_lab_table || '   lab 
                                        join  (SELECT DIAL.* 
                                                FROM PT_DIALYSIS_HX                 dial 
                                                JOIN  '|| p_cohort_table  ||'     coh ON dial.pat_id = coh.pat_id  
                                                                                    AND (coh.PL_CIRRHOSIS = 1 OR COH.DX_CIRRHOSIS = 1) 
                                                )          dia  on lab.pat_id = dia.pat_id  
                                                                and dia.CONTACT_DATE between lab.CREATININE_result_time - 7  and lab.CREATININE_result_time   
                                        group by lab.pat_id,lab.CREATININE_result_time 
                                        ) 
                        where dialysis_count >= 2)        dia on labs.pat_id = dia.pat_id and labs.CREATININE_RESULT_TIME = dia.CREATININE_RESULT_TIME 
                        ) 
            ) 
where meld + 1.32 * (137 - sodium) - (0.033 * meld * (137 - sodium)) > 18) ';
 EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where MELD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria MELD = 1');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_MELD;

procedure P_ACP_EF_NARR(p_table_name in varchar2, p_cohort_table in varchar2, p_timeframe in number) as
 q1 varchar2(6000);
  v_procname varchar2(100) := 'P_ACP_EF_NARR';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 --Create table 
    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_NARR (	"PAT_ID" VARCHAR2(18 BYTE), 
	"ACC_NUM" VARCHAR2(254 BYTE), 
	"ORDER_PROC_ID" NUMBER(18,0) NOT NULL ENABLE, 
	"NARR_LINE" NUMBER(38,0) NOT NULL ENABLE, 
	"NARR_NARRATIVE" VARCHAR2(4000 BYTE), 
	"ORDER_TIME" DATE, 
	"ORD_VALUE" VARCHAR2(254 BYTE)
   ) ON COMMIT PRESERVE ROWS'
    ;
    commit;   



 q1 := 'INSERT INTO ' || p_table_name || '(PAT_ID,ACC_NUM,ORDER_PROC_ID,NARR_LINE, NARR_NARRATIVE, ORDER_TIME, ORD_VALUE) 
   SELECT DISTINCT opr.pat_id 
               ,opr.acc_num 
               ,opr.order_proc_id 
               ,nar.line           AS narr_line 
               ,nar.narrative      AS narr_narrative 
		   ,order_time 
		   ,ord_value 
  FROM (SELECT DISTINCT coh.pat_id 
               ,opr.order_proc_id 
               ,opr.order_time 
                ,acc.acc_num 
               ,res.line 
               ,res.ord_value 
  FROM ' || p_cohort_table || '                    coh 
  JOIN order_proc               		opr ON coh.pat_id = opr.pat_id 
  LEFT JOIN order_results       res ON opr.order_proc_id = res.order_proc_id 
  LEFT JOIN order_rad_acc_num   acc ON opr.order_proc_id = acc.order_proc_id 
  WHERE  
  		(coh.pl_chf = 1 or coh.dx_chf = 1) 
        AND coh.SELECTED IS NULL 
        AND opr.order_status_c = 5                     				
        AND OPR.ORDER_TYPE_C = 29 
		AND opr.result_time between SYSDATE - (365.25 * ' || p_timeframe || ') AND SYSDATE)                      opr 
  JOIN order_narrative  nar ON opr.order_proc_id = nar.order_proc_id 
  WHERE trim(nar.narrative) IS NOT NULL';

EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_table_name;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values (p_table_name, sysdate, v_audit_cnt,v_procname,'Pull narratives from orders');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_EF_NARR;

procedure P_ACP_EF_FLAG(p_cohort_table in varchar2, p_narr_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_EF_FLAG';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET EF = 1  
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN ( 
    SELECT distinct PAT_ID 
 from ( 
 SELECT PAT_ID 
		        ,ORDER_PROC_ID 
		        ,ORDER_TIME 
		        ,CASE 
				WHEN 
					ORD_VALUE IS NULL 
				THEN TEST_VALUES 
				ELSE (CASE 
						WHEN	REGEXP_LIKE ( ORD_VALUE	,''\+.\-'',''i'' ) 
						THEN TO_CHAR(TO_NUMBER(REGEXP_SUBSTR(ORD_VALUE,''[1-9]\d*(\.\,\d+)?''),''9999999999D9999999999'',''NLS_NUMERIC_CHARACTERS = ''''.,'''''') - 5) 
						ELSE COALESCE(REGEXP_SUBSTR(ORD_VALUE,''[1-9]\d*(\.\,\d+)?''),REGEXP_SUBSTR(ORD_VALUE,''?[[:digit:],.]*$'') ) 
					END)END AS LVEF_FINAL_VALUE 
		        ,TEST_VALUES NARR_VALUE 
		        ,ORD_VALUE 
		        ,NARR_AGG 
		    FROM  ( 
			SELECT PAT_ID 
			      ,ORDER_PROC_ID 
			      ,ORDER_TIME 
			      ,ORD_VALUE 
			      ,TRIM(	CASE 
					WHEN 
						REGEXP_LIKE(SUBSTR(NARR_AGG,REGEXP_INSTR(LOWER(NARR_AGG),''\d++.(to|-).\d++.(|^%)'',5),8),''(to|-)'',''i'') 
					THEN SUBSTR(NARR_AGG,REGEXP_INSTR(LOWER(NARR_AGG),''\d++.(to|-).\d++.(|^%)'',5),2) 
					ELSE SUBSTR(NARR_AGG,REGEXP_INSTR(LOWER(NARR_AGG),''\d++.(|^%)'',5),2) 
				END) AS TEST_VALUES 
			      ,NARR_AGG 
			  FROM (SELECT LVEF.PAT_ID 
		      ,LVEF.ORDER_PROC_ID 
		      ,LVEF.ACC_NUM 
		      ,LVEF.ORDER_TIME 
		      ,LVEF.ORD_VALUE 
		      ,LISTAGG(NARR.NARR_LINE 
		                  || ''|'' 
		                  || NARR.NARR_NARRATIVE,'' || '') WITHIN  GROUP(			 ORDER BY NARR.NARR_LINE		) NARR_AGG 
		  FROM (SELECT PAT_ID 
		      ,ACC_NUM 
		      ,ORDER_PROC_ID 
		      ,NARR_LINE 
		      ,ORDER_TIME 
		      ,ORD_VALUE 
		      ,NARR_NARRATIVE 
		  FROM ' || p_narr_table || '
		 WHERE (			LOWER(NARR_NARRATIVE) LIKE ''%ejection%'' 
			    OR UPPER(NARR_NARRATIVE) LIKE ''%LVEF%'' 
			    OR LOWER(NARR_NARRATIVE) LIKE ''%fraction%'')) LVEF 
          JOIN ' || p_narr_table || ' NARR ON LVEF.ORDER_PROC_ID = NARR.ORDER_PROC_ID  
		  							AND NARR.NARR_LINE  BETWEEN LVEF.NARR_LINE and LVEF.NARR_LINE  + 1 
		 GROUP BY LVEF.PAT_ID 
		      ,LVEF.ORDER_PROC_ID 
		      ,LVEF.ACC_NUM 
		      ,LVEF.ORDER_TIME 
		      ,LVEF.ORD_VALUE) 
		)) 
            WHERE LVEF_FINAL_VALUE in (''1'',''2'',''3'',''4'',''5'',''6'',''7'',''8'',''9'',''10'',''11'',''12'',''13'',''14'',''15'',''16'',''17'',''18'',''19'',''20'',''21'',''22'',''23'',''24'',''25'',''26'',''27'',''28'',''29'',''30'',''31''))';  

EXECUTE IMMEDIATE q1; 
 commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where EF = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria EF = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

        end P_ACP_EF_FLAG;


procedure P_ACP_MERGE_CRITERION(p_cohort_table in varchar2) as
 q1 varchar2(4000);
 q2 varchar2(4000);
 q3 varchar2(4000);
 q4 varchar2(4000);
 q5 varchar2(4000);
 q6 varchar2(4000);

  v_procname varchar2(100) := 'P_ACP_MERGE_CRITERION';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ALS = 1  ,SELECTED = 1 
  WHERE  
    (PL_ALS = 1 AND DX_ALS = 1)  
        AND SELECTED IS NULL';

 q2 := 'UPDATE ' || p_cohort_table  || ' 
  SET CANCER = 1  ,SELECTED = 1 
  WHERE  
    (
    (PL_CANCER = 1 AND ONC_VISIT = 1)
    OR
    (DX_CANCER = 1 AND CHEMO = 1)
    )
        AND SELECTED IS NULL'
    ;

q3 := 'UPDATE ' || p_cohort_table  || ' 
  SET CHF = 1 ,SELECTED = 1 
  WHERE  
        (
        ((PL_CHF = 1 OR DX_CHF = 1) AND EF = 1)
        OR
        (PL_CHF = 1  AND CHF_ADMIT = 1) 
        )
        AND SELECTED IS NULL'
    ;

q4 := 'UPDATE ' || p_cohort_table  || ' 
  SET COPD = 1  ,SELECTED = 1 
  WHERE  
        (PL_COPD = 1 AND COPD_ADMIT = 1) 
        AND SELECTED IS NULL'
    ;

q5 := 'UPDATE ' || p_cohort_table  || ' 
  SET ESLD = 1 ,SELECTED = 1  
  WHERE  
        PL_CIRRHOSIS = 1 
        AND 
        (PL_ESDL_DECOMPENSATION = 1
        OR dx_ESDL_decompensation = 1
        OR MELD = 1) 
        AND SELECTED IS NULL'
    ;

q6 := 'UPDATE ' || p_cohort_table  || ' 
  SET ESRD = 1 ,SELECTED = 1 
  WHERE  
        (
            (PL_ESRD = 1 OR DX_ESRD = 1 )
        AND NEPH_VISIT = 1
        )
        OR
        (PL_ESRD = 1 AND DX_ESRD = 1 ) 
        AND SELECTED IS NULL'
    ;
EXECUTE IMMEDIATE q1; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ALS = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ALS = 1');
      commit;   
EXECUTE IMMEDIATE q2; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CANCER = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CANCER = 1');
      commit;   
EXECUTE IMMEDIATE q3; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where COPD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria COPD = 1');
      commit;
EXECUTE IMMEDIATE q4; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CHF = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CHF = 1');

      commit;   

EXECUTE IMMEDIATE q5; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ESLD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ESLD = 1');
      commit; 

EXECUTE IMMEDIATE q6; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ESRD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ESRD = 1');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_MERGE_CRITERION;

procedure P_ACP_AGE_CRTIERIA(p_cohort_table in varchar2, p_age_limit in varchar2) as
 q1 varchar2(4000);

  v_procname varchar2(100) := 'P_ACP_AGE_CRTIERIA';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'UPDATE ' || p_cohort_table  || ' 
        SET AGE = 1, selected = 1
        WHERE 
            SELECTED IS NULL
            AND (pl_copd IS NOT NULL
            OR pl_chf IS NOT NULL 
            OR PL_ESRD IS NOT NULL
            OR PL_ALS IS NOT NULL 
            OR PL_CANCER IS NOT NULL
            OR PL_CIRRHOSIS IS NOT NULL)
            and CURRENT_AGE >= ' || p_age_limit || '';
EXECUTE IMMEDIATE q1;
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AGE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria AGE = 1');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_AGE_CRTIERIA; 

procedure p_acp_remove_not_selected(p_cohort_table in varchar2) as
 q1 varchar2(4000);

  v_procname varchar2(100) := 'p_acp_remove_not_selected';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'DELETE FROM ' || p_cohort_table  ||
        ' WHERE 
            SELECTED IS NULL
';
 EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Final selection');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end p_acp_remove_not_selected;

procedure P_ACP_ADPOLST(p_adpolst_table in varchar2, p_cohort_table in varchar2, p_driver_adpolst in varchar2, p_driver_record_stat in varchar2, p_driver_doc_stat in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 :=  'INSERT INTO ' || p_adpolst_table || 
  ' SELECT distinct coh.pat_id 
                                ,bb.doc_info_id 
                                ,bb.SCAN_FILE 
                                ,BT.DOC_GROUP
                                ,bb.doc_recv_time
                                ,case when bb.doc_recv_time between sysdate - (365.25 *3 ) AND sysdate then 1 else 0 end three_year_ad_polst 
                        FROM ' || p_cohort_table ||'          COH   
                        join DOC_INFORMATION                    BB on coh.PAT_ID = BB.DOC_PT_ID 
                        join ' || p_driver_adpolst || '        BT on BB.DOC_INFO_TYPE_C = BT.DOC_INFO_TYPE_C 
                        WHERE  
                            TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 3
                            AND 
                            BB.IS_SCANNED_YN = ''Y''  
                            -- We noticed that in the case of AD-POLST documents, there were instances where the docs had been deleted 
                            and ( 
                                bb.RECORD_STATE_C IS NULL 
                                OR bb.RECORD_STATE_C not in (SELECT RECORD_STATE_C FROM ' || p_driver_record_stat || ') 
                                )-- Deleted 
                            and ( 
                                bb.DOC_STAT_C IS NULL 
                                OR bb.DOC_STAT_C NOT IN (SELECT DOC_STAT_C FROM ' || p_driver_doc_stat || ') 
                                )-- Error 
                            and bb.DOC_REVOK_DT is null';

EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_ADPOLST';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ADPOLST', sysdate, v_audit_cnt,v_procname,'AD POLST TABLE CREATED');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST;


procedure P_ACP_ADPOLST_update(p_cohort_table in varchar2, p_adpolst_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST_UPDATE';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
SELECT DISTINCT PAT_ID 
            ,CASE WHEN POLST_ALL = 0 OR POLST_ALL IS NULL THEN 0 ELSE 1 END POLST_ALL 
            ,CASE WHEN AD_ALL = 0 OR AD_ALL IS NULL THEN 0 ELSE 1 END AD_ALL 
            ,CASE WHEN POLST_THREE = 0 OR POLST_THREE IS NULL THEN 0 ELSE 1 END POLST_THREE 
            ,CASE WHEN AD_THREE = 0 OR AD_THREE IS NULL THEN 0 ELSE 1 END AD_THREE 
FROM ( 
        SELECT PAT_ID 
                ,SUM(POLST_ALL) AS POLST_ALL 
                ,SUM(AD_ALL) AS AD_ALL 
                ,SUM(POLST_THREE) AS POLST_THREE 
                ,SUM(AD_THREE) AS AD_THREE 
        FROM ( 
                SELECT DISTINCT PAT_ID 
                        ,CASE WHEN DOC_GROUP = ''POLST'' THEN 1 ELSE 0 END POLST_ALL 
                        ,CASE WHEN DOC_GROUP  = ''AD'' THEN 1 ELSE 0 END AD_ALL 
                        ,CASE WHEN DOC_GROUP = ''POLST'' and three_year_ad_polst = 1 THEN 1 ELSE 0 END POLST_THREE 
                        ,CASE WHEN DOC_GROUP  = ''AD'' and three_year_ad_polst = 1 THEN 1 ELSE 0 END AD_THREE 
                FROM (SELECT distinct ap.pat_id 
                                ,ap.doc_info_id 
                                ,ap.SCAN_FILE 
                                ,ap.DOC_GROUP 
                                ,ap.three_year_ad_polst 
                        FROM ' || p_adpolst_table ||'          ap ) 
                ) 
            GROUP BY PAT_ID 
    ) 
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.AD_ALL = r.AD_ALL 
 ,coh.AD_THREE = r.AD_THREE 
 ,coh.POLST_ALL = r.POLST_ALL 
 ,coh.POLST_THREE = r.POLST_THREE';

EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_ALL = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria AD_ALL = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_THREE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria AD_THREE = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where POLST_ALL = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria POLST_ALL = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where POLST_THREE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria POLST_THREE = 1');
      commit;      

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST_update;


procedure P_ACP_ADPOLST_date(p_cohort_table in varchar2, p_adpolst_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST_date';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
USING( 
        SELECT DISTINCT PAT_ID 
                    ,MAX(MOST_RECENT_AD) AS MOST_RECENT_AD 
                    ,MAX(MOST_RECENT_POLST) AS MOST_RECENT_POLST 
        FROM ( 
            select distinct  
            pat_id 
            ,case when doc_group = ''AD'' THEN MOST_RECENT ELSE NULL END MOST_RECENT_AD 
            ,case when doc_group = ''POLST'' THEN MOST_RECENT ELSE NULL END MOST_RECENT_POLST 
            from ( 
                    SELECT  
                    PAT_ID 
                    ,MAX(doc_recv_time) OVER (PARTITION BY PAT_ID,DOC_GROUP) AS MOST_RECENT 
                    ,DOC_GROUP 
                    FROM ' || p_adpolst_table || ') 
            ) 
        GROUP BY PAT_ID) r 
ON (coh.pat_id = r.pat_id  ) 
when matched then UPDATE SET 
coh.MOST_RECENT_AD = r.MOST_RECENT_AD 
,coh.MOST_RECENT_POLST = r.MOST_RECENT_POLST';

EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where MOST_RECENT_AD IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'MOST_RECENT_AD IS NOT NULL');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where MOST_RECENT_POLST IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'MOST_RECENT_POLST IS NOT NULL');
      commit;
      
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST_date;

procedure P_ACP_ADPOLST_merge(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST_merge';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

   q1 := 'MERGE INTO ' || p_cohort_table || ' coh  
     USING (SELECT PAT_ID 
            ,CASE WHEN AD_ALL + POLST_ALL >= 1 THEN 1 ELSE 0 END AD_POLST_ALL
            ,CASE WHEN AD_THREE + POLST_THREE >= 1 THEN 1 ELSE 0 END AD_POLST_THREE
            ,CASE WHEN coh.MOST_RECENT_AD is not null 
                        and  coh.MOST_RECENT_POLST is not null 
                        and  coh.MOST_RECENT_AD >= coh.MOST_RECENT_POLST 
                    THEN coh.MOST_RECENT_AD 
                WHEN coh.MOST_RECENT_AD is not null 
                        and  coh.MOST_RECENT_POLST is not null 
                        and  coh.MOST_RECENT_POLST > coh.MOST_RECENT_AD 
                    THEN coh.MOST_RECENT_POLST 
                WHEN coh.MOST_RECENT_AD is not null 
                        and  coh.MOST_RECENT_POLST is null 
                    THEN coh.MOST_RECENT_AD 
                WHEN coh.MOST_RECENT_POLST is not null 
                        and  coh.MOST_RECENT_AD is null  
                    THEN coh.MOST_RECENT_POLST                        
                ELSE coh.MOST_RECENT_POLST 
                END LAST_AD_POLST 
FROM ' || p_cohort_table || ' COH)r 
ON (coh.pat_id = r.pat_id  )
WHEN MATCHED THEN  
UPDATE SET 
coh.LAST_AD_POLST = r.LAST_AD_POLST, 
coh.AD_POLST_ALL = r.AD_POLST_ALL, 
coh.AD_POLST_THREE = r.AD_POLST_THREE';
EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_POLST_ALL = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'AD_POLST_ALL = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_POLST_THREE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'AD_POLST_THREE = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where LAST_AD_POLST IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'LAST_AD_POLST IS NOT NULL');
      commit;

      
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST_merge;


procedure P_ACP_loc_last_pcp(p_cohort_table in varchar2, p_driver_dept in varchar2, p_driver_appt_type in varchar2, p_driver_appt_status in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_loc_last_pcp';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'MERGE INTO ' || p_cohort_table  || ' coh 
USING ( 
SELECT DISTINCT PAT_ID 
        ,LOC_ID 
FROM (SELECT DISTINCT PAT_ID 
        ,LOC_ID 
        ,rank() over( 
                    partition by pat_id  
                    order by pat_id, contact_date, checkout_time desc 
                    ) ranking 
    FROM (SELECT distinct coh.PAT_ID 
                    ,enc.PAT_ENC_CSN_ID 
                    ,enc.EFFECTIVE_DATE_DT as contact_date 
                    ,enc.checkout_time 
                    ,coh.CUR_PCP_PROV_ID  
                    ,enc.VISIT_PROV_ID 
                    ,case when coh.CUR_PCP_PROV_ID =  enc.VISIT_PROV_ID then 1 else 0 end pcp_visit_yn 
                    ,enc.department_id 
                    ,loc.loc_id 
            FROM ' || p_cohort_table  || '         coh 
            join pat_enc                enc ON coh.PAT_ID = enc.PAT_ID 
            JOIN ' || p_driver_dept || '       dep on enc.DEPARTMENT_ID = dep.department_id 
            left join clarity_dep dep2 on dep.department_id = dep2.department_id 
            left join clarity_loc loc on dep2.rev_loc_id = loc.loc_id 
            join ' || p_driver_appt_type || '      apt on enc.APPT_PRC_ID = apt.prc_id 
            where   
                    TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 1 
                    AND 
                    enc.effective_date_dt between sysdate - 366 and sysdate  
                    and enc.enc_type_c = 101 
                    and (enc.appt_status_c is not null and enc.appt_status_c not in (SELECT APPT_STATUS_C 
                                                                                            FROM ' || p_driver_appt_status || '
                                                                                            WHERE APPT_CAT = ''exclude'' )
                )
            ) 
    WHERE 
        pcp_visit_yn = 1 
        --add exclusion for emergency depts 
        and department_id not in (      --Exclude Emergency Care 
                                    ''70011''       --	SMBP WILSHIRE UC 
                                        ,''80008''        --	SMBP MARINA DL REY UC 
                                        --Exclude 1223 16th street 3100 
                                        ,''70232''            --	GERI SM 3100 
                                        --Exclude SMBP 1090 
                                        ,''70216''            --SMBP 10TH FL 1090   
                                        --exclude WW COMP HLTH STE 525 
                                        ,''60155''            --	IM CHP MP1 525 
                                        --WLV EAST WEST CENTER 
                                        ,''80044''            --	IM EAST WEST MED WLV 
                                        ,''80106''            --	PET CT IMG WESTLAKE  
                                        --UCLA Health Torrance Specialty Care 
                                        ,''80273''            --	EAST WEST TORR STE 302 
                                ) 
    ) 
WHERE    ranking = 1 
)r 
ON 
(COH.PAT_ID = R.PAT_ID) 
WHEN MATCHED THEN 
UPDATE SET coh.CLINIC_LAST_PCP = r.LOC_ID'; 

EXECUTE IMMEDIATE q1;
commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CLINIC_LAST_PCP IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Calculate CLINIC_LAST_PCP for clinic assignment');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_loc_last_pcp;

PROCEDURE P_ACP_LOC_MOST_VISITS(p_cohort_table in varchar2, p_driver_dept in varchar2, p_driver_appt_type in varchar2, p_driver_appt_status in varchar2) as
 q1 varchar2(4000);


  v_procname varchar2(100) := 'P_ACP_LOC_MOST_VISITS';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 := 'MERGE INTO ' || p_cohort_table  || ' coh 
USING ( 
SELECT DISTINCT PAT_ID
        ,LOC_ID
FROM (SELECT DISTINCT PAT_ID
        ,LOC_ID
        ,rank() over(
                    partition by pat_id 
                    order by pat_id, ENC_COUNT desc, last_visit DESC,PCP_VISIT_YN desc, checkout_time desc 
                    ) ranking
--,MAX(contact_date) OVER (PARTITION BY pat_id, LOC_ID) AS last_visit
FROM (SELECT coh.PAT_ID
            ,loc.LOC_ID
            ,case when coh.CUR_PCP_PROV_ID =  enc.VISIT_PROV_ID then 1 else 0 end pcp_visit_yn 
            ,max(enc.effective_date_dt) over (partition by coh.pat_id, loc.LOC_ID) as last_visit
            ,count(enc.pat_enc_csn_id) over (partition by coh.pat_id, loc.LOC_ID) as ENC_COUNT 
            ,COALESCE(enc.checkout_time,enc.checkin_time) as checkout_time 
            FROM ' || p_cohort_table  || '         coh 
            join pat_enc                enc ON coh.PAT_ID = enc.PAT_ID 
            JOIN ' || p_driver_dept || '       dep on enc.DEPARTMENT_ID = dep.department_id 
            left join clarity_dep dep2 on dep.department_id = dep2.department_id 
            left join clarity_loc loc on dep2.rev_loc_id = loc.loc_id 
            join ' || p_driver_appt_type || '      apt on enc.APPT_PRC_ID = apt.prc_id 
            where  
                    TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 1 
                    AND 
                    enc.effective_date_dt between sysdate - 366 and sysdate  
                    and enc.enc_type_c = 101 
                    and (enc.appt_status_c is not null and enc.appt_status_c not in (SELECT APPT_STATUS_C 
                                                                                            FROM ' || p_driver_appt_status || '
                                                                                            WHERE APPT_CAT = ''exclude'' )
                        and enc.department_id not in (      --Exclude Emergency Care 
                                    ''70011''       --	SMBP WILSHIRE UC 
                                        ,''80008''        --	SMBP MARINA DL REY UC 
                                        --Exclude 1223 16th street 3100 
                                        ,''70232''            --	GERI SM 3100 
                                        --Exclude SMBP 1090 
                                        ,''70216''            --SMBP 10TH FL 1090   
                                        --exclude WW COMP HLTH STE 525 
                                        ,''60155''            --	IM CHP MP1 525 
                                        --WLV EAST WEST CENTER 
                                        ,''80044''            --	IM EAST WEST MED WLV 
                                        ,''80106''            --	PET CT IMG WESTLAKE  
                                        --UCLA Health Torrance Specialty Care 
                                        ,''80273''            --	EAST WEST TORR STE 302 
                                ) 
                )
            ) 
    ) 
WHERE    ranking = 1 
)r 
ON 
(COH.PAT_ID = R.PAT_ID) 
WHEN MATCHED THEN 
UPDATE SET coh.clinic_most_visits = r.LOC_ID'; 

EXECUTE IMMEDIATE q1;
 commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where clinic_most_visits IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Calculate clinic_most_visits for clinic assignment');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end P_ACP_LOC_MOST_VISITS;


procedure P_ACP_loc_last_visit(p_cohort_table in varchar2, p_driver_dept in varchar2, p_driver_appt_type in varchar2, p_driver_appt_status in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_loc_last_visit';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'MERGE INTO ' || p_cohort_table  || ' coh 
USING ( 
SELECT DISTINCT PAT_ID 
        ,LOC_ID 
FROM (SELECT DISTINCT PAT_ID 
        ,LOC_ID 
        ,rank() over( 
                    partition by pat_id  
                    order by pat_id, contact_date desc,  checkout_time desc 
                    ) ranking 
    FROM (SELECT distinct coh.PAT_ID 
                    ,enc.PAT_ENC_CSN_ID 
                    ,enc.EFFECTIVE_DATE_DT as contact_date 
                    ,checkout_time 
                    ,coh.CUR_PCP_PROV_ID  
                    ,enc.VISIT_PROV_ID 
                    ,case when coh.CUR_PCP_PROV_ID =  enc.VISIT_PROV_ID then 1 else 0 end pcp_visit_yn 
                    ,enc.department_id 
                    ,loc.loc_id 
            FROM ' || p_cohort_table  || '         coh 
            join pat_enc                enc ON coh.PAT_ID = enc.PAT_ID 
            JOIN ' || p_driver_dept || '       dep on enc.DEPARTMENT_ID = dep.department_id 
            left join clarity_dep dep2 on dep.department_id = dep2.department_id 
            left join clarity_loc loc on dep2.rev_loc_id = loc.loc_id 
            join ' || p_driver_appt_type || '      apt on enc.APPT_PRC_ID = apt.prc_id 
            where  
                    TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 2
                    AND 
                    enc.effective_date_dt between sysdate - 366 and sysdate  
                    and enc.enc_type_c = 101 
                    and (enc.appt_status_c is not null and enc.appt_status_c not in (SELECT APPT_STATUS_C 
                                                                                            FROM ' || p_driver_appt_status || '
                                                                                            WHERE APPT_CAT = ''exclude'' )
                )
            ) 
    WHERE 
        --add exclusion for emergency depts 
        department_id not in (      --Exclude Emergency Care 
                                    ''70011''       --	SMBP WILSHIRE UC 
                                        ,''80008''        --	SMBP MARINA DL REY UC 
                                        --Exclude 1223 16th street 3100 
                                        ,''70232''            --	GERI SM 3100 
                                        --Exclude SMBP 1090 
                                        ,''70216''            --SMBP 10TH FL 1090   
                                        --exclude WW COMP HLTH STE 525 
                                        ,''60155''            --	IM CHP MP1 525 
                                        --WLV EAST WEST CENTER 
                                        ,''80044''            --	IM EAST WEST MED WLV 
                                        ,''80106''            --	PET CT IMG WESTLAKE  
                                        --UCLA Health Torrance Specialty Care 
                                        ,''80273''            --	EAST WEST TORR STE 302 
                                ) 
    ) 
WHERE    ranking = 1 
)r 
ON 
(COH.PAT_ID = R.PAT_ID) 
WHEN MATCHED THEN 
UPDATE SET coh.CLINIC_LAST_VISIT = r.LOC_ID'; 

EXECUTE IMMEDIATE q1;
commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CLINIC_LAST_VISIT IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Calculate CLINIC_LAST_VISIT for clinic assignment');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_loc_last_visit;





PROCEDURE P_ACP_CLINIC(p_cohort_table in varchar2) as
 q1 varchar2(4000);

  v_procname varchar2(100) := 'P_ACP_CLINIC';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'update ' || p_cohort_table  || ' 
    set clinic_id = COALESCE(CLINIC_LAST_PCP,CLINIC_MOST_VISITS,CLINIC_LAST_VISIT) 
    WHERE 
          TRUNC(SYSDATE) - TRUNC(CREATION_DATE) BETWEEN  0 AND 2 
    ';
EXECUTE IMMEDIATE q1;
 commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CLINIC_ID IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Assign clinic_id');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_CLINIC; 

PROCEDURE P_ACP_COORDINATOR(p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_COORDINATOR';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'merge into ' || p_cohort_table  || '  coh 
USING 
(SELECT distinct coh.pat_id 
            ,gr.coordinator_id 
FROM ' || p_cohort_table  || '  coh 
join ' || p_driver_table || '  gr on coh.clinic_id = gr.clinic_id 
WHERE 
TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 3 AND  
GR.clinic_id NOT IN (
    -- clinics with +1 CCC
6016
,7083
,6017 
,7000)
) r
on
(coh.pat_id = r.pat_id)
when matched THEN
update SET coh.coordinator_id = r.coordinator_id';
EXECUTE IMMEDIATE q1;
commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where COORDINATOR_ID IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Assign coordinator_id');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_COORDINATOR;

PROCEDURE P_ACP_INTERVENTION_ASSIGNMENT(p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
v_procname varchar2(100) := 'P_ACP_INTERVENTION_ASSIGNMENT';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 := 'MERGE INTO ' || p_cohort_table || ' coh 
USING ( 
SELECT DISTINCT coh.pat_id  
               ,ran.arm 
  FROM ' || p_cohort_table || '       coh 
  JOIN ' || p_driver_table || '       ran on coh.clinic_id = ran.clinic_id 
  WHERE 
  TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 3 
  ) r 
  ON  
  (coh.pat_Id = r.pat_id) 
  WHEN MATCHED THEN 
  UPDATE SET coh.ARM = r.arm';
 EXECUTE IMMEDIATE q1;
 commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ARM IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Assign intervention arm');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_INTERVENTION_ASSIGNMENT;


procedure p_assign_study_id(p_cohort_table in varchar2, p_study_table in varchar2) as
 q1 varchar2(4000);
v_procname varchar2(100) := 'p_assign_study_id';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'INSERT INTO ' || p_study_table || '(pat_id,ADDED_DATE) 
        SELECT DISTINCT coh.PAT_ID, CURRENT_DATE 
        FROM ' || p_cohort_table || '                     coh 
        LEFT JOIN ' || p_study_table || '       st ON coh.pat_id = st.pat_id 
        WHERE coh.SELECTED = 1 
                AND coh.EXCLUSION_REASON is null 
                AND st.pat_id is null';
 EXECUTE IMMEDIATE q1;
commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT_STUDY_ID';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT_STUDY_ID', sysdate, v_audit_cnt,v_procname,'Assign study_id');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end p_assign_study_id;
        
procedure p_acp_clean_up(p_table_name in varchar2) as
 q1 varchar2(4000);
v_procname varchar2(100) := 'p_acp_clean_up';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'DROP TABLE ' || p_table_name  ||
        ' PURGE';
 EXECUTE IMMEDIATE q1;
commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end p_acp_clean_up;       

procedure p_acp_truncate_tbl(p_table_name in varchar2) as
 q1 varchar2(4000);
v_procname varchar2(100) := 'p_acp_truncate_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'TRUNCATE TABLE ' || p_table_name ;
 EXECUTE IMMEDIATE q1;
commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end p_acp_truncate_tbl;       


procedure p_trigger_intervention(p_cohort_table in varchar2, p_wrb_table in varchar2, p_wrb_hx_table in varchar2) as
 q1 varchar2(4000);
 q2 varchar2(4000);
v_procname varchar2(100) := 'p_trigger_intervention';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'insert into ' || p_wrb_table || '  
(PAT_ID
,ARM
,CLINIC_ID
,CUR_PCP_PROV_ID
,NEXT_APPT_DATE
,NEXT_APPT_DEPARTMENT_ID
,NEXT_APPT_LOC_ID
,NEXT_APPT_PAT_ENC_CSN_ID
,NEXT_APPT_PROVIDER_ID
,RWB_SUBMISSION_DATE) 
SELECT pat_id
                ,arm
                ,loc_id AS CLINIC_ID
                ,cur_pcp_prov_id
                ,first_appointment AS NEXT_APPT_DATE
                ,DEPARTMENT_ID AS NEXT_APPT_DEPARTMENT_ID
                ,LOC_ID AS NEXT_APPT_LOC_ID
                ,pat_enc_csn_id AS NEXT_APPT_PAT_ENC_CSN_ID
                ,PROV_ID AS NEXT_APPT_PROVIDER_ID
                ,current_date AS RWB_SUBMISSION_DATE
FROM (SELECT  x.* 
        FROM (select distinct coh.pat_id
                    ,coh.cur_pcp_prov_id
                    ,coh.arm
                    ,appt.pat_enc_csn_id
                    ,appt.contact_date
					,MIN(appt.contact_date) OVER (PARTITION BY appt.pat_id) AS first_appointment
                    ,APPT.PROV_ID
                    ,APPT.DEPARTMENT_ID
                    ,APPT.LOC_ID
                from ' || p_cohort_table || '                        coh 
                JOIN v_sched_appt                          appt ON coh.pat_id = appt.pat_id 
                -- and patient is not lockout (not intervention in the last 6 months) : use intervention or appointment DATE 
                LEFT JOIN ' || p_wrb_hx_table || '            hx   ON COH.PAT_ID = HX.PAT_ID 
                                                                    AND current_date - trunc(hx.RWB_SUBMISSION_DATE) < 180  
                left join XDR_ACP_COHORT_bk_05172019        prm on coh.pat_id = prm.pat_id and prm.prime = 1
                where 
					--If patient is selected  
                    coh.selected = 1 
                    -- and patient is not decesased and patient is not restricted 
                    AND coh.EXCLUDED is null 
                    --appointment completed 
                    AND appt.appt_status_name = ''Scheduled'' 
					--  and patient has a PC appointment in the designated clinic 
					AND appt.loc_id = coh.clinic_id               
					-- Patient without a AD/POLST in the last three years 
                    and (coh.ad_polst_all = 0 OR (current_DATe - coh.LAST_AD_POLST) BETWEEN 0 AND 365.25 *3) 
                    -- Appointment time threshold 
                    and trunc(appt.CONTACT_DATE) - current_date between 21 and 27 
                    --and patient is not lockout (not intervention in the last 6 months)
                    AND hx.PAT_ID is  null
                    -- patients not already in PRIME
                    and prm.pat_id is null
            ) x 
            WHERE 
                x.contact_date = first_appointment)';
                
 EXECUTE IMMEDIATE q1;
commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_wrb_table;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_RWB_WEEKLY', sysdate, v_audit_cnt,v_procname,'Interventions triggered');
      commit;

--  Load weekly interventions into the historic table
 q2 := 'INSERT INTO ' || p_wrb_hx_table || ' 
        SELECT * FROM ' || p_wrb_table ;
                
 EXECUTE IMMEDIATE q2;
commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_wrb_hx_table;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_RWB_WEEKLY_HX', sysdate, v_audit_cnt,v_procname,'Historic interventions count');
      commit;
      
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end p_trigger_intervention;
end ACP_COHORT_REFRESH;