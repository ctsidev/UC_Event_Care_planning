create or replace package body                                                                acp_cohort_refresh as
 
 -- Record error messages and counts on a log table to monitor progess and 
 -- troubleshoot issues
  PROCEDURE PRINT_ERROR (v_proc_name varchar2, v_code number, v_errm varchar2) AS
  BEGIN 
    INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,COMMENTS) values (v_proc_name, sysdate, null, 'ERROR - Code: ' || v_code || '- ' || v_errm);
  END PRINT_ERROR;



/***********************************************************************************
    Create temp tables to hold drivers and reference codes use in the process
-- Primary Care Department driver
-- Diagnoses Codes driver
-- Final diagnoses codes driver (dx_id)
-- Patient vital status driver
-- Encoutner/appoitnment status driver
-- Chemotherapy CPT driver
-- Apporintment types driver
-- AD/POLST docs driver
-- doc status driver
-- labs driver
*************************************************************************************/

-- Populate the Primary Care(PC) department list used on patient identification and Intervention logic
  PROCEDURE p_create_pc_department_tbl AS
   v_procname varchar2(100) := 'p_create_pc_department_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

-- Insert records
    EXECUTE IMMEDIATE  'INSERT INTO XDR_ACP_DEPT_DRV
SELECT DISTINCT dep.DEPARTMENT_ID
            ,loc.loc_id
FROM clarity.CLARITY_DEP dep
left join clarity_loc    loc on dep.rev_loc_id = loc.loc_id
WHERE dep.DEPARTMENT_ID IN (
910314,
910310,
70085,
80366,
80039,
940035,
940043,
60155,
60156,
10511,
910227,
910228,
910230,
910231,
910177,
910178,
50541,
80273,
80279,
80114,
20511,
80169,
80179,
80044,
80382,
80329,
80049,
940012,
940013,
940015,
940016,
940017,
940018,
940019,
80087,
940038,
61026,
70001,
70009,
70003,
70005,
70006,
70007,
70008,
70010,
70011,
60678,
60679,
70079,
70032,
80168,
70034,
70035,
60152,
60153,
60159,
60160,
60161,
60162,
70080,
60167,
60170,
60173,
60175,
60176,
60177,
60178,
60180,
60181,
10009,
10014,
10030,
10031,
80399,
20560,
80000,
80368,
20570,
60079,
80337,
70186,
70190,
20561,
80379,
80372,
80071,
70232,
72005,
70210,
10501149,
80190,
80197,
60610,
60614,
60618,
60619,
60620,
60624,
60658,
60659,
60078,
60083,
10501190,
21200003,
21501001,
10501101,
80286,
80293,
60737,
60745,
70090,
70092,
70095,
20006,
20007,
20009,
70183,
70185,
80392,
20010,
70191,
20018,
80165,
20024,
80112,
80115,
70208,
70211,
70215,
70216,
80088,
80090,
30101101,
99102100,
70004,
80124,
80125,
80132,
80139,
80142,
80156,
80158,
80163,
80164,
80171,
60201,
80178,
72004,
72008,
80001,
80002,
80003,
80006,
80007,
80008,
80009,
80034,
80035,
80038,
80040,
80047,
80048,
80060,
80068,
--ADDED ON 01/04/20
80317,
80478,
80576
)'
    ;
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DEPT_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DEPT_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_pc_department_tbl;


-- Populate a temporary Diagnosis driver table used on patient identification.
-- There is a driver file from which the insert statements were created (XDR_WALLING_DX_LOOKUP_TEMP.csv)
  PROCEDURE p_create_initial_diagnoses_tbl AS
   v_procname varchar2(100) := 'p_create_initial_diagnoses_table';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL
INTO XDR_ACP_DX_TEMP VALUES(''155.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''155.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''155.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.1'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.11'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.12'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.13'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.14'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.1'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.11'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.12'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''J95.850'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.3'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.31'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.4'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.40'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.41'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.60'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.69'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.2'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''572.2'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.5'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''428.0'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.1'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.2'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.20'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.21'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.22'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.23'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.3'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.30'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.31'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.32'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.33'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.4'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.40'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.41'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.42'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.43'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''428.9'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''456.0'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''456.2'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''456.20'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''456.21'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''491.2'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''491.20'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''491.21'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''491.22'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''492.0'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.2'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.20'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.21'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''493.22'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''496'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''511.81'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''567.0'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.2'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.21'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.23'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.29'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.8'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.89'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''567.9'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.2'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''571.6'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''572.2'',''ENCEPHALOPATHY'')
INTO XDR_ACP_DX_TEMP VALUES(''572.4'',''HEPATORENAL'')
INTO XDR_ACP_DX_TEMP VALUES(''585.5'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''585.6'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''789.5'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''789.51'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''789.51'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''789.59'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''V42.0'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V45.1'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V45.11'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V45.12'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.0'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.1'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.2'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.3'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.31'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.32'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V56.8'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C15.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C16.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C22.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C25.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C48.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C71.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.39'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C78.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.11'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.19'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.31'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.32'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.49'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.51'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.52'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.60'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.70'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.81'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.82'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C79.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C80.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.09'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.19'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.29'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.39'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.49'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.79'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C81.99'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C85.19'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C85.29'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C85.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.52'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.62'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.92'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C91.A2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C92.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C92.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''C95.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''G12.21'',''ALS'')
INTO XDR_ACP_DX_TEMP VALUES(''G20'',''PARKINSONS'')
INTO XDR_ACP_DX_TEMP VALUES(''G96.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''I09.81'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I11.0'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I13.0'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I13.2'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.1'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.9'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I85.01'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''I85.11'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''J43.9'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J44.0'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J44.1'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J44.9'',''COPD'')
INTO XDR_ACP_DX_TEMP VALUES(''J91.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.9'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K67'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.3'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.30'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.31'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.4'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.40'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K70.41'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K72.90'',''ENCEPHALOPATHY'')
INTO XDR_ACP_DX_TEMP VALUES(''K72.91'',''ENCEPHALOPATHY'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.3'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.4'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.5'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.60'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K74.69'',''CIRRHOSIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K76.7'',''HEPATORENAL'')
INTO XDR_ACP_DX_TEMP VALUES(''N18.5'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''N18.6'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''R18.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''R18.8'',''ASCITES'')
INTO XDR_ACP_DX_TEMP VALUES(''Z94.0'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''V46.2 '',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.81'',''COPD_SPO2'')
INTO XDR_ACP_DX_TEMP VALUES(''150'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''150.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''151.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''157.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''158.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''158.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''158.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''191.9'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''197.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.1'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.3'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.4'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.5'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.6'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.8'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.81'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.82'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''198.89'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''199.0'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.7'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.70'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.71'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.72'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.73'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.74'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.75'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.76'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.77'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''200.78'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.40'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.50'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.60'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.70'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''201.90'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''202.80'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''204.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''204.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''204.92'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''205.00'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''205.02'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''205.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''208.12'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''332.0'',''PARKINSONS'')
INTO XDR_ACP_DX_TEMP VALUES(''335.20'',''ALS'')
INTO XDR_ACP_DX_TEMP VALUES(''349.2'',''CANCER'')
INTO XDR_ACP_DX_TEMP VALUES(''398.91'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''402.01'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''402.11'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''402.91'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.01'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.03'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.11'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.13'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.91'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''404.93'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.21'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.20'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.22'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.23'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.30'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.31'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.32'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.33'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.40'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.41'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.42'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I50.43'',''CHF'')
INTO XDR_ACP_DX_TEMP VALUES(''I85.10'',''BLEEDING'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.0'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.2'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''K65.8'',''PERITONITIS'')
INTO XDR_ACP_DX_TEMP VALUES(''Z99.2'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z91.15'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.31'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.01'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.02'',''ESRD'')
INTO XDR_ACP_DX_TEMP VALUES(''Z49.32'',''ESRD'')
SELECT 1 FROM DUAL'
    ;
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DX_TEMP';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DX_TEMP', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_initial_diagnoses_tbl;



-- Populate final Diagnosis driver table used on patient identification
-- Match the ICD codes to their DX_ID using the EDG tables
  PROCEDURE p_create_final_diagnoses_tbl AS
   v_procname varchar2(100) := 'p_create_final_diagnoses_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT INTO XDR_ACP_DX_LOOKUP 
                        select edg.dx_id 
                        ,drv.* 
                        from XDR_ACP_DX_TEMP      drv 
                        join edg_current_icd9           edg on drv.icd_CODE = edg.CODE  
                        UNION 
                        select edg.dx_id 
                        ,drv.* 
                        from XDR_ACP_DX_TEMP      drv 
                        join edg_current_icd10           edg on drv.icd_CODE = edg.CODE'
    ;
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DX_LOOKUP';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DX_LOOKUP', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_final_diagnoses_tbl;

-- Populate the Patient Status driver used on patient identification to exclude
-- test/dummy and other 'not real' patients from the cohort
  PROCEDURE p_create_pat_status_tbl AS
   v_procname varchar2(100) := 'p_create_pat_status_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
                            INTO XDR_ACP_PAT_STATUS VALUES(6) 
                            INTO XDR_ACP_PAT_STATUS VALUES(8) 
                            INTO XDR_ACP_PAT_STATUS VALUES(9) 
                            INTO XDR_ACP_PAT_STATUS VALUES(1018) 
                            INTO XDR_ACP_PAT_STATUS VALUES(1017) 
                            SELECT 1 FROM DUAL';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_PAT_STATUS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PAT_STATUS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_pat_status_tbl;

-- Populate the Appointment Status driver used on patient identification to exclude
-- invalid encounters when chekcing the +1 PC criteria
PROCEDURE p_create_appt_status_tbl AS
   v_procname varchar2(100) := 'p_create_appt_status_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
                        INTO XDR_ACP_APPT_STATUS VALUES(1,''include'') 
                        INTO XDR_ACP_APPT_STATUS VALUES(3,''exclude'') 
                        INTO XDR_ACP_APPT_STATUS VALUES(4,''exclude'') 
                        INTO XDR_ACP_APPT_STATUS VALUES(5,''exclude'') 
                        SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_APPT_STATUS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_APPT_STATUS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_appt_status_tbl;

-- Populate the Chemotherapy CPT driver table used on patient identification for Cancer
  PROCEDURE p_create_cpt_chemo_tbl AS
   v_procname varchar2(100) := 'p_create_cpt_chemo_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_CHEMO_CPT VALUES(96401)
INTO XDR_ACP_CHEMO_CPT VALUES(96402)
INTO XDR_ACP_CHEMO_CPT VALUES(96405)
INTO XDR_ACP_CHEMO_CPT VALUES(96406)
INTO XDR_ACP_CHEMO_CPT VALUES(96409)
INTO XDR_ACP_CHEMO_CPT VALUES(96411)
INTO XDR_ACP_CHEMO_CPT VALUES(96413)
INTO XDR_ACP_CHEMO_CPT VALUES(96415)
INTO XDR_ACP_CHEMO_CPT VALUES(96416)
INTO XDR_ACP_CHEMO_CPT VALUES(96417)
INTO XDR_ACP_CHEMO_CPT VALUES(96423)
INTO XDR_ACP_CHEMO_CPT VALUES(96420)
INTO XDR_ACP_CHEMO_CPT VALUES(96422)
INTO XDR_ACP_CHEMO_CPT VALUES(96425)
INTO XDR_ACP_CHEMO_CPT VALUES(96440)
INTO XDR_ACP_CHEMO_CPT VALUES(96446)
INTO XDR_ACP_CHEMO_CPT VALUES(96450) 
SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_CHEMO_CPT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_CHEMO_CPT', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_cpt_chemo_tbl;

-- Populate the Appointment Type driver table
-- Some are used only for counting the PC encounters, 
-- and others on the Appointment for the Intervention trigger logic
    PROCEDURE p_create_appt_type_tbl AS
   v_procname varchar2(100) := 'p_create_appt_type_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_APPT_TYPE VALUES(''2001'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2009'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2008'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2000'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4640'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2007'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2133'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4497'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2214'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4201'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2003'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4639'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4641'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4642'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4653'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2858'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3499'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2553'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331238'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4644'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2848'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4728'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4682'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''1002'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4945'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2006'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4179'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5819'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2066'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4199'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4605'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3509'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4271'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4376'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330543'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4583'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4655'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4210'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4848'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4657'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2014'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4652'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4654'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331409'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331322'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2004'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4582'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2211'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''10143'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2867'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4668'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4185'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3447'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4681'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4683'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2010'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331009'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5009'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331406'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2839'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331742'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4633'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331226'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4495'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4686'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4403'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331052'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4684'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2131'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3462'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4626'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4270'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3448'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331528'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2854'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4433'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4460'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''334010'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2857'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331195'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3394'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4669'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4849'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4667'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332607'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331286'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332481'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2850'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4189'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331342'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4680'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4738'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331401'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4222'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4707'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2015'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332628'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4264'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331259'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4481'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2939'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4635'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4662'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4670'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''335392'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4409'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331024'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331057'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331077'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5068'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331384'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331497'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4259'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5069'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331189'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4411'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4632'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4616'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4272'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''330933'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4176'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4650'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''334794'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4672'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331103'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4645'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4209'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4192'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4142'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4371'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4599'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332447'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4663'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4459'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''334782'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3391'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4634'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4940'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3826'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2847'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331088'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5331'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331055'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4628'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''1032'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5332'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4416'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2005'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4637'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4462'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5026'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4461'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4190'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4464'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4421'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4434'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4186'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331787'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4065'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331087'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4661'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2002'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5182'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2074'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2071'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4627'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2018'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331053'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4700'',1,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4630'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4435'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4482'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4285'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4699'',1,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5834'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4064'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4625'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''333182'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333270'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''10189'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2063'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4194'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4726'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3333'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2085'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4701'',1,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4415'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4704'',1,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2011'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332625'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4198'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331349'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4676'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5236'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4278'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333271'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331173'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331348'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4067'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4665'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5184'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4878'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332942'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4208'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4063'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332489'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''1129'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331062'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2837'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2863'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''330563'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332488'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4360'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3353'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331809'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2855'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4709'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4679'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4664'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4706'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2088'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5773'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4973'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332491'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4311'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4130'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4972'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4280'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3349'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4282'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331501'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4708'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3390'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331217'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3477'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''330542'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331317'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5522'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3605'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4743'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4273'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2070'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4410'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4300'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331340'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331093'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331526'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4187'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2859'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331100'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2874'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4412'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4068'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4711'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331282'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2877'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331004'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331509'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4674'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331243'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331028'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4438'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331264'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330540'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5772'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4281'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331081'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331291'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4702'',1,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4129'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3392'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2830'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5066'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''333129'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3467'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333177'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4196'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2083'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4957'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3418'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3246'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4450'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5028'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332615'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4191'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''335984'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331026'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5053'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4449'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4066'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2840'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5776'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4436'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''528'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5541'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''21070007'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3393'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4725'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333178'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332595'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331403'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4615'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5540'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4275'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331304'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4188'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4370'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4319'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2838'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4265'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4069'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5519'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2598'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4658'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3295'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2710'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331788'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2856'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331290'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4648'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332583'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4687'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331287'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2017'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3324'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4496'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331327'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4554'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4611'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5088'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5054'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5238'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2851'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4843'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4474'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4643'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''330145'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331214'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3331'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4631'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2013'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4413'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4581'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330005'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330003'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4448'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2626'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331368'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333543'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332588'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2016'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5521'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2111'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4619'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2599'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331351'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332631'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330571'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331726'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4262'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333423'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2618'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2881'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2616'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4428'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331319'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333549'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331786'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4418'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2216'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2864'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330905'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''334802'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331386'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331309'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333087'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331375'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331138'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2082'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333220'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5174'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4729'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331160'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331305'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330124'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5172'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331220'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333224'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331066'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2940'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331272'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''10147'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4149'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4796'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331370'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331316'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331139'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2067'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331810'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4532'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2597'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2938'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331202'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4174'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4584'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331223'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331328'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4609'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4473'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331324'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331037'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4207'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2624'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4195'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3330'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331268'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331374'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331276'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333137'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5771'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332575'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331508'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5237'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331281'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4359'',1,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331381'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330286'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3468'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332952'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4417'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4607'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3733'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4580'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331289'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333298'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330544'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331174'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331362'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2969'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4178'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331383'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''10144'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332442'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331255'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331364'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333343'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331343'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4610'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331068'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332482'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5535'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4846'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''333261'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331262'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331050'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331208'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4620'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4269'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331043'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4423'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331344'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2544'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4452'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4614'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4938'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5239'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4742'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3606'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331279'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3592'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4419'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331299'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3476'',1,1)
INTO XDR_ACP_APPT_TYPE VALUES(''332576'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331261'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331365'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4939'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331047'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331308'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331330'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331071'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4951'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4691'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4274'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331345'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2831'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330326'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4797'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4463'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5303'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332256'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331064'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3355'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331041'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331361'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4197'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5241'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331390'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331036'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4623'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''330904'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332448'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333341'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''335728'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4621'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''330552'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330898'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2209'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''331072'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2910'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331303'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4690'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4844'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5482'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4618'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''4608'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3513'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4414'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5233'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''10141'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333272'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2833'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5183'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331175'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331355'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''10192'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332609'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''336163'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5089'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2081'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''3625'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''2884'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5304'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''332645'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330910'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5774'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4429'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''333110'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331346'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5809'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''333545'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4277'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''4539'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331499'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''330938'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''2835'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331333'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5034'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''5111'',0,0)
INTO XDR_ACP_APPT_TYPE VALUES(''331310'',0,0)
--TELEMEDICINE-TELEPHONE
INTO XDR_ACP_APPT_TYPE VALUES(''5171'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''5174'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''6066'',0,1)
INTO XDR_ACP_APPT_TYPE VALUES(''3603'',0,1)
SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_APPT_TYPE';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_APPT_TYPE', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;


    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_appt_type_tbl;


-- Populate the Advaced Directive /POLST driver table
-- These are site specific and shall require other sites to investigate and 
-- locate their own codes
PROCEDURE p_create_adpolst_driver_tbl AS
   v_procname varchar2(100) := 'p_create_adpolst_driver_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_ADPOLST_DRV VALUES(''11'',''AD'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''300052'',''AD'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''10'',''AD'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''200068'',''POLST'')
INTO XDR_ACP_ADPOLST_DRV VALUES(''300058'',''POLST'') 
SELECT 1 FROM DUAL';
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_ADPOLST_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ADPOLST_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_adpolst_driver_tbl;


-- Populate the Advaced Directive /POLST driver table
-- These are site specific and shall require other sites to investigate and 
-- locate their own codes
PROCEDURE p_create_record_tbl AS
   v_procname varchar2(100) := 'p_create_record_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL  
                        INTO XDR_ACP_RECORD_STATE VALUES(2) 
                        SELECT 1 FROM DUAL';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_RECORD_STATE';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_RECORD_STATE', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;


    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_record_tbl;

PROCEDURE p_create_DOC_STATUS_tbl AS
   v_procname varchar2(100) := 'p_create_DOC_STATUS_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT INTO XDR_ACP_DOC_STATUS  
SELECT DOC_STAT_C 
FROM ZC_DOC_STAT 
WHERE DOC_STAT_C = 35';
    commit;   
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_DOC_STATUS';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_DOC_STATUS', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_DOC_STATUS_tbl;

-- Populate the Labs driver table to be used to calculate MELD
-- These are site specific and shall require other sites to investigate 
-- There is a driver file that contains a list of LOINC codes [XDR_WALLING_LAB_DRV.csv]
-- that can assist with this step
-- If you need to create the table
--	CREATE GLOBAL TEMPORARY TABLE "CTSI_RESEARCH"."XDR_ACP_LAB_DRV" 
--   (	"PROC_ID" NUMBER, 
--	"COMPONENT_ID" NUMBER, 
--	"LAB_CATEGORY" VARCHAR2(25 BYTE),
--    "LOINC_CODE" VARCHAR2(50 BYTE));
--This might be UCLA specific but Component_id = 1561653 corresponds to AMINO ACID SCREEN URINE
-- although linked to the 2160-0 creatinine lab. Therefore we must exclude this lab from the lab_driver
PROCEDURE p_create_lab_drv_tbl AS
   v_procname varchar2(100) := 'p_create_lab_drv_tbl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Insert records
    EXECUTE IMMEDIATE  'INSERT ALL 
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105313,2476,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(686,8001545,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(720516,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(2126,12312,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327238,12312,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83970,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83970,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,8001531,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(281469,3005980,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105109,2381,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(892,8001484,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(680,8001484,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83970,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,8001549,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,10020051,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83974,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,8001484,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,8001545,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327246,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(76139,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(2126,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83974,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(721807,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(721807,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(165000000,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1750,10010540,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105183,2382,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98225,8001486,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(892,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725882,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(57423,3004397,''CREATININE'',''38483-4'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(247602,1526776,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725898,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(686,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105117,2485,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105325,2485,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105297,2486,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98223,8001550,''BILIRUBIN'',''15152-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,1526296,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(78045,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(743966,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105271,2432,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,8001531,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105181,2381,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(23267,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(245307,8001490,''SODIUM'',''1994-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105191,2386,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,10020000,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(686,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105119,2477,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98223,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(748,10020051,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(165000000,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725683,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,8001522,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(60938,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(304770,10001157,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(680,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327246,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725866,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(303647,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327261,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1750,10020029,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(17421,10010148,''BILIRUBIN'',''1968-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(721807,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(680,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(21289,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(743966,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(686,8001522,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105117,2450,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1750,8000225,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(103773,523,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105169,2381,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105185,2383,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105187,2386,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725898,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83970,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,8001531,''ALBUMIN'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(165000000,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725882,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327238,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327246,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725882,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(304776,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1620,1553372,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1750,10001157,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98225,8001485,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83974,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(686,8001484,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725765,10010540,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(165000000,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(892,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(76139,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,8001545,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105295,2476,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,8001546,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(78220,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(23267,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,8001550,''BILIRUBIN'',''15152-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105107,2450,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105121,2451,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(245333,8001520,''CREATININE'',''38483-4'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105273,2433,''CREATININE'',''38483-4'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(103767,518,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(10278,1511118,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105117,2381,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,8001484,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(743966,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(78220,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(17421,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105327,2486,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(90626,8001550,''BILIRUBIN'',''15152-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,3000387,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(305100,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(23267,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10020000,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(16500000,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(748,3000387,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98223,3000387,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10020051,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(10274,1511105,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,10020018,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327250,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327261,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(165000000,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1620,3003794,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(680,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(245307,3003748,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10020050,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(721807,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725922,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(2126,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,10020050,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(23267,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98219,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,8001486,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(90544,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(17421,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(743966,10000318,''BILIRUBIN'',''5770-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(743966,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105295,2485,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327246,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105123,2477,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,3005513,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,3000387,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(720516,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(16500000,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(2126,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98221,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(76139,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(109390,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725683,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105173,2382,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(892,10020050,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(109390,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(9956,3005974,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327250,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327238,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725683,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105109,2476,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105117,2476,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,1810650,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105119,2486,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105119,2451,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(103779,530,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,1534098,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,8001486,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(748,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725683,10010067,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(76139,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,3000387,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327238,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(2126,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10020018,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327238,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(305100,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327250,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(16500000,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327261,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,3000384,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,8001545,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,8001546,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(720516,10000353,''CREATININE'',''3097-3'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98219,8001531,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1620,8000228,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105107,2381,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105123,2383,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105121,2383,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(90544,8001546,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105171,2383,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(88991,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1750,3000122,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(738,10020000,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98223,3005513,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327250,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(85478,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725866,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(245333,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327246,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(721807,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(16500000,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(78045,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(725882,12418,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327238,12292,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(247602,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98219,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(892,10010898,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105297,2477,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105315,2477,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98223,8001546,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(21289,10010150,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(748,8001549,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,8001549,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98219,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105109,2450,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105283,2450,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327232,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(720516,10000549,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105123,2451,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(1750,8000232,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98225,3000362,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(89041,8001486,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98219,8001486,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105119,2383,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(720516,10001991,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(105193,2387,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(89041,8001485,''SODIUM'',''2947-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(748,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(303647,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327261,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(686,3000378,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(85478,10000139,''ALBUMIN'',''1751-7'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(984,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(688,10000322,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(678,8001522,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(16500000,12344,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(682,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(98219,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(83974,10010264,''CREATININE'',''2160-0'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(10274,1511118,''SODIUM'',''2951-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327261,12313,''BILIRUBIN'',''1975-2'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(2126,12378,''INR'',''6301-6'')
INTO XDR_ACP_LAB_DRV(PROC_ID,COMPONENT_ID,LAB_CATEGORY,LOINC_CODE)VALUES(327252,12378,''INR'',''6301-6'')
SELECT 1 FROM DUAL'; 
    commit;   

--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_LAB_DRV';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_LAB_DRV', sysdate, v_audit_cnt,v_procname,'Create lookup reference table');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

  END p_create_lab_drv_tbl;

-------------------------------------------------
-- Create the denominator table
-------------------------------------------------
-- Criteria: 
-- 		Adult patients (+18) 
--		with more than 1 Primary Care visit  in the last 12 months
-- 				Use the primary care department list 
--				use only office visits
--				check the encounter status for completed visits
__ 
  procedure p_acp_create_denominator(p_cohort_table in varchar2, p_dept_driver_table in varchar2, p_appt_driver_table in varchar2)  as
 q1 varchar2(4000);
    v_procname varchar2(100) := 'p_acp_create_denominator';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --- update dash_etl_log with record count prior to truncate 
--    v_qry_str := 'select COUNT(*) from ' || p_observation_dest_tbl;

 q1 := 'INSERT INTO ' || p_cohort_table  || '(PAT_ID,current_age, CREATION_DATE,CUR_PCP_PROV_ID, LANGUAGE_C)  
        SELECT DISTINCT x.pat_id 
                    ,FLOOR(MONTHS_BETWEEN(TRUNC(sysdate),TRUNC(pat.BIRTH_DATE))/12) AS CURRENT_AGE 
            ,SYSDATE AS CREATION_DATE 
            ,pat.CUR_PCP_PROV_ID 
            ,pat.LANGUAGE_C 
        FROM (SELECT enc.pat_id 
                    ,PAT.BIRTH_DATE 
            ,count(enc.pat_enc_csn_id) AS pat_enc_count 
        FROM clarity.pat_enc                        enc 
        LEFT JOIN '|| p_cohort_table  ||  '         coh  ON enc.pat_id = coh.pat_id         
        JOIN clarity.patient                        pat   ON enc.pat_id = pat.pat_id 
        JOIN clarity.clarity_ser                    prov2 ON pat.cur_pcp_prov_id = prov2.PROV_ID   
                                                    AND prov2.user_id IS NOT NULL 
        JOIN ' || p_dept_driver_table || '      dd on enc.department_id = dd.department_id 
        WHERE  
                coh.pat_id is null 
                AND enc.effective_date_dt between sysdate - 366 and sysdate 
                and floor(months_between(TRUNC(sysdate), pat.birth_date)/12) >= 18 
                and enc.enc_type_c = 101 
                and (enc.appt_status_c is not null and enc.appt_status_c not in (SELECT APPT_STATUS_C 
                                                                                FROM ' || p_appt_driver_table || '
                                                                                WHERE appt_cat = ''exclude'') 
                    )  
                GROUP BY enc.PAT_ID, 
                    PAT.BIRTH_DATE)x 
        JOIN clarity.patient                        pat   ON x.pat_id = pat.pat_id 
        WHERE x.pat_enc_count > 1';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Create cohort table');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_create_denominator;

-------------------------------------------------
-- update patients age. This is used when checking the age related inclusion critieria
-- periodically to continue adding patients to the cohort
-------------------------------------------------
procedure p_acp_update_age(p_cohort_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_update_age';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
SELECT DISTINCT coh.PAT_ID 
,FLOOR(MONTHS_BETWEEN(TRUNC(sysdate),TRUNC(pat.BIRTH_DATE))/12) AS CURRENT_AGE 
            FROM ' || p_cohort_table  || '     coh 
            JOIN patient            pat on coh.pat_id = pat.pat_id 
            WHERE 
                coh.SELECTED IS NULL 
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.CURRENT_AGE = r.CURRENT_AGE
 ,coh.UPDATE_DATE = SYSDATE
' ;

 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where SELECTED IS NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Update patients age for those not selected');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end p_acp_update_age;

-------------------------------------------------
-- Check patient vital status to exclude deceased patients (do not delete from patient list)
-- It uses an UCLA function developed by the CTSI team (i2b2.f_death)
-------------------------------------------------
procedure p_acp_exclude_deceased(p_cohort_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_exclude_deceased';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
SELECT DISTINCT coh.PAT_ID 
            FROM ' || p_cohort_table  || '     coh 
            JOIN patient            pat on coh.pat_id = pat.pat_id 
            WHERE 
                i2b2.f_death_clarity(pat.pat_id,2,1)  = ''Known Deceased'' 
                and coh.DECEASED_YN IS NULL 
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.EXCLUDED = 1
 ,coh.EXCLUSION_DATE = SYSDATE
 ,coh.UPDATE_DATE = SYSDATE
 ,coh.EXCLUSION_REASON = ''patient deceased''
 ,coh.DECEASED_YN = 1
' ;

 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where EXCLUSION_REASON = ''patient deceased''';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Exclude already selected and newly deceased patients');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end p_acp_exclude_deceased;

-------------------------------------------------
-- Check patient vital status to exclude restriced patients 
-- This only applies to the research cohort
-- (do not delete from patient list)
-------------------------------------------------
procedure p_acp_flag_restricted(p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'p_acp_flag_restricted';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
 SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh 
                --ccv4: patient_id changes 
                JOIN patient_fyi_flags           flags ON coh.pat_id = flags.patient_id 
                left JOIN ' || p_driver_table || '      st   on flags.PAT_FLAG_TYPE_C = st.PAT_FLAG_TYPE_C 
--                                left JOIN I2B2.LZ_CLARITY_PATIENT PAT ON COH.PAT_ID = PAT.PAT_ID
                WHERE (flags.PAT_FLAG_TYPE_C is null OR st.PAT_FLAG_TYPE_C IS NOT NULL)
                and coh.RESTRICTED_YN IS NULL    --20
                UNION 
                SELECT coh.pat_id 
                FROM ' || p_cohort_table ||'                   coh 
                JOIN patient_3                         ON coh.pat_id = patient_3.pat_id 
--                                left JOIN I2B2.LZ_CLARITY_PATIENT PAT ON COH.PAT_ID = PAT.PAT_ID
                WHERE 
                    (patient_3.pat_id is null 
                    OR patient_3.is_test_pat_yn = ''Y'' 
                    OR patient_3.is_test_pat_yn <> ''N'') 
                and coh.RESTRICTED_YN IS NULL        --0
                UNION
                SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh
                JOIN patient_2 on coh.pat_id = patient_2.pat_id
                WHERE
                  patient_2.PAT_CONF_NM_REC_ID  is NOT null
                  and coh.RESTRICTED_YN IS NULL        --16
                UNION
                SELECT coh.pat_id  
                FROM ' || p_cohort_table ||'                   coh
                JOIN patient P on coh.pat_id = P.pat_id
                WHERE
                      (p.pat_mrn_id LIKE ''<%>'' 
                      OR  p.pat_mrn_id LIKE ''99%''  
                      OR  p.pat_mrn_id LIKE ''%Z%''
                      OR p.birth_date is  NULL
                      OR  P.PAT_NAME  LIKE ''%dummy%'' 
                      OR  (P.pat_last_name || P.PAT_FIRST_NAME || P.PAT_MIDDLE_NAME) LIKE ''%dummy%''
                      OR P.PAT_NAME  LIKE ''TR-%''  
                      OR  P.PAT_NAME  LIKE ''YY%'' 
                      OR P.PAT_NAME LIKE ''ZZ%''
                      OR p.restricted_yn = ''Y''
                      )and coh.RESTRICTED_YN IS NULL        --0
               UNION
                SELECT coh.pat_id 
                FROM ' || p_cohort_table ||'                   coh
                --ccv4:(10/21/19) 
                JOIN (Select Distinct PAC.PAT_ID,Acct.CONF_NAM_OF_ASSC_PT  From PAT_ACCT_CVG PAC
              Join ACCOUNT Acct on Acct.ACCOUNT_ID = PAC.ACCOUNT_ID
              Where Acct.CONF_NAM_OF_ASSC_PT IS NOT NULL
              ) cnfgtor on COH.pat_id = cnfgtor.pat_id      
                WHERE  coh.RESTRICTED_YN IS NULL    
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.UPDATE_DATE = SYSDATE
  ,coh.RESTRICTED_YN = 1
' ;

 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where RESTRICTED_YN = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
            INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Patients labeled as RESTRICTED');
      commit;    
      EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end p_acp_flag_restricted;

-------------------------------------------------
-- Pull all Problem list dx codes for patient denominator 
-------------------------------------------------
procedure P_ACP_PL_DX_TBL(p_table_name  in varchar2, p_cohort_table in varchar2, p_driver_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_PL_DX_TBL';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

  q1 := 'INSERT INTO ' || p_table_name || ' 
                SELECT coh.pat_id, drv.dx_flag 
                FROM ' || p_cohort_table  || '          coh  
                JOIN problem_list                     pl    ON coh.pat_id = pl.pat_id AND pl.rec_archived_yn = ''N'' 
                JOIN zc_problem_status                zps   ON pl.problem_status_c = zps.problem_status_c 
                JOIN ' || p_driver_table ||'   drv   ON pl.dx_id = drv.dx_id 
  where  
        zps.name = ''Active'' 
        AND coh.SELECTED IS NULL';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_PL_DX';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PL_DX', sysdate, v_audit_cnt,v_procname,'Pull problem list records for patients in denominator');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_PL_DX_TBL;


-------------------------------------------------
-- Update PL_DX flags in the cohort table for the different conditions in the criterium
-------------------------------------------------
 procedure P_ACP_PL_DX(p_cohort_table in varchar2, p_table_name in varchar2, p_dx_flag in varchar2) as
 q1 varchar2(4000);
 v_procname varchar2(100) := 'P_ACP_PL_DX';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || 
  ' SET PL_' || p_dx_flag || ' = 1
  ,UPDATE_DATE = SYSDATE 
  WHERE 
    SELECTED IS NULL 
    AND PAT_ID IN ( 
                SELECT DISTINCT pat_id 
                FROM ' || p_table_name  || '          
               WHERE dx_flag = ''' || p_dx_flag || ''' 
               )';
 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where PL_' || p_dx_flag || ' = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PL_DX', sysdate, v_audit_cnt,v_procname,p_dx_flag);
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_PL_DX;

-------------------------------------------------
-- Update PL_DX flags in the cohort table for the ESDL specific conditions in the criteriu
-------------------------------------------------
procedure P_ACP_PL_ESDL_DECOMPENSATION(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_PL_ESDL_DECOMPENSATION';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := '
  UPDATE ' || p_cohort_table  || 
  ' SET pl_ESDL_decompensation = 1 
  ,UPDATE_DATE = SYSDATE 
  WHERE  
        SELECTED IS NULL
        AND (PL_PERITONITIS = 1 
        OR PL_ASCITES = 1 
        OR PL_BLEEDING = 1 
        OR PL_ENCEPHALOPATHY = 1 
        OR PL_HEPATORENAL = 1)';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where pl_ESDL_decompensation = 1 ';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_PL_DX', sysdate, v_audit_cnt,v_procname,'pl_ESDL_decompensation');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_PL_ESDL_DECOMPENSATION;

-------------------------------------------------
-- Pull all Encounters DX codes for patient denominator 
-------------------------------------------------
procedure P_ACP_ENC_DX_TBL(p_table_name  in varchar2, p_cohort_table in varchar2, p_driver_table in varchar2, p_timeframe in number) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ENC_DX_TBL';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

   q1 := 'INSERT INTO ' || p_table_name || ' 
                SELECT coh.pat_id, drv.dx_flag
                FROM ' || p_cohort_table  || '          coh 
                JOIN pat_enc_dx                     dx on coh.pat_id = dx.pat_id 
                JOIN ' || p_driver_table ||'    drv   ON dx.dx_id = drv.dx_id 
                left join pat_enc                   enc on dx.pat_enc_csn_id = enc.pat_enc_csn_id 
                WHERE 
                    coh.SELECTED IS NULL
                    AND dx.CONTACT_DATE between sysdate - (365.25 * ' || p_timeframe || ') and sysdate 
                    AND enc.enc_type_c = 101';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_ENC_DX';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ENC_DX', sysdate, v_audit_cnt,v_procname,'Pull encounter diagnoses for patients in the denominator');

      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_ENC_DX_TBL;


-------------------------------------------------
-- Update encounter decompensation ESDL flag
-------------------------------------------------
procedure P_ACP_DX_ESDL_DECOMPENSATION(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DX_ESDL_DECOMPENSATION';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := '
  UPDATE ' || p_cohort_table  || 
  ' SET DX_ESDL_decompensation = 1 
    ,UPDATE_DATE = SYSDATE 
  WHERE  
        SELECTED IS NULL
        AND (DX_PERITONITIS = 1 
        OR DX_ASCITES = 1 
        OR DX_BLEEDING = 1 
        OR DX_ENCEPHALOPATHY = 1 
        OR DX_HEPATORENAL = 1 
        OR DX_PERITONITIS = 1)';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where dx_ESDL_decompensation = 1 ';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ENC_DX', sysdate, v_audit_cnt,v_procname,'dx_ESDL_decompensation');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end P_ACP_DX_ESDL_DECOMPENSATION;



-------------------------------------------------
-- Update encounter DX flags for the different conditions in the criteriu
-------------------------------------------------
procedure P_ACP_ENC_DX(p_cohort_table in varchar2, p_dx_table in varchar2, p_dx_flag in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ENC_DX';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

begin
   DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 
   
 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET DX_' || p_dx_flag || ' = 1 
    ,UPDATE_DATE = SYSDATE 
  WHERE 
    SELECTED IS NULL 
    AND PAT_ID IN ( 
                SELECT DISTINCT dx.pat_id 
                FROM ' || p_dx_table ||'    dx    
                WHERE dx.dx_flag = ''' || p_dx_flag || ''' )';
EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
  v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where DX_' || p_dx_flag || ' = 1';
    

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
         INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ENC_DX', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_dx_flag);
               commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_ENC_DX;

-------------------------------------------------
-- Flag patients where no DX flags were identified
-- flagging this patients allows us to exclude them from 
-- future queries and optimize the process
-------------------------------------------------
procedure p_acp_flag_pat_with_dxpl(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'p_acp_flag_pat_with_dxpl';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  ||
        ' SET NO_DXPL = 1 
          ,UPDATE_DATE = CURRENT_DATE  
          WHERE 
                PL_ALS IS NULL 
                AND PL_CANCER IS NULL 
                AND PL_CHF IS NULL 
                AND PL_CIRRHOSIS IS NULL 
                AND PL_COPD IS NULL 
                AND PL_COPD_SPO2 IS NULL 
                AND PL_ESLD IS NULL 
                AND PL_ESDL_decompensation IS NULL                
                AND PL_ESRD IS NULL 
                AND DX_ALS IS NULL                
                AND DX_CANCER IS NULL 
                AND DX_CHF IS NULL 
                AND DX_CIRRHOSIS IS NULL 
                AND DX_COPD IS NULL 
                --AND DX_COPD_SPO2 IS NULL
                --AND DX_ESLD IS NULL
                AND DX_ESDL_DECOMPENSATION IS NULL 
                AND DX_ESRD IS NULL ';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT WHERE NO_DXPL IS NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Patients with at leat one dx code (encounter or PL)');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end p_acp_flag_pat_with_dxpl;


-------------------------------------------------
-- Flag oncology department visits for the Advanced Cancer criteria
-- Using department names and speciaties
-------------------------------------------------
procedure P_ACP_DEPT_VISIT_ONC(p_cohort_table in varchar2, p_dept in varchar2, p_years in number, p_criteria in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DEPT_VISIT_ONC';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ' || p_dept || '_VISIT = 1 
    ,UPDATE_DATE = SYSDATE 
  WHERE  
    SELECTED IS NULL 
    AND PAT_ID IN ( 
                SELECT DISTINCT  coh.PAT_ID 
FROM ' || p_cohort_table  || '          coh 
JOIN clarity.PAT_ENC                            enc on coh.pat_id = enc.pat_id 
LEFT JOIN clarity.CLARITY_DEP                   dep ON enc.department_id = dep.department_id 
LEFT JOIN clarity.v_cube_d_provider             prv ON enc.visit_prov_id = prv.provider_id 
WHERE 
    (coh.PL_' || p_criteria || ' = 1 OR coh.DX_' || p_criteria || ' = 1) 
    AND 
            (REGEXP_LIKE(dep.specialty,''' || p_dept || ''',''i'') 
            OR 
            REGEXP_LIKE(prv.primary_specialty,''' || p_dept || ''',''i'') 
            ) 
    and enc.enc_type_c = 101 
    AND enc.EFFECTIVE_DATE_DT between sysdate - (365.25 * '|| p_years ||' ) AND sysdate 
    and coh.SELECTED IS NULL 
    )';
 EXECUTE IMMEDIATE q1;
 commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ' || p_dept || '_VISIT = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
      INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_dept || '_VISIT = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_DEPT_VISIT_ONC;

-------------------------------------------------
-- Flag nephrology department visits for the ESRD criteria
-------------------------------------------------
procedure P_ACP_DEPT_VISIT_NEPH(p_cohort_table in varchar2, p_dept in varchar2, p_years in number, p_criteria in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DEPT_VISIT_NEPH';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ' || p_dept || '_VISIT = 1  
    ,UPDATE_DATE = SYSDATE 
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN ( 
                SELECT DISTINCT  coh.PAT_ID 
FROM ' || p_cohort_table  || '          coh 
JOIN clarity.PAT_ENC                            enc on coh.pat_id = enc.pat_id 
LEFT JOIN clarity.CLARITY_DEP                   dep ON enc.department_id = dep.department_id 
LEFT JOIN clarity.v_cube_d_provider             prv ON enc.visit_prov_id = prv.provider_id 
WHERE   
    (coh.PL_' || p_criteria || ' = 1 OR coh.DX_' || p_criteria || ' = 1) 
    AND 
            (REGEXP_LIKE(dep.specialty,''' || p_dept || ''',''i'') 
            OR 
            REGEXP_LIKE(prv.primary_specialty,''' || p_dept || ''',''i'') 
            ) 
    AND enc.EFFECTIVE_DATE_DT between sysdate - (365.25 * '|| p_years ||' ) AND sysdate 
    and coh.SELECTED IS NULL 
    )';
 EXECUTE IMMEDIATE q1;
  commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ' || p_dept || '_VISIT = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
          INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_dept || '_VISIT = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_DEPT_VISIT_NEPH;

-------------------------------------------------
-- Flag patients based on their department visits for the a given criteria and timefram
-- in this case we use them for nephrology(ESRD) and oncology (Advanced cancer)
-------------------------------------------------
procedure P_ACP_DEPT_ADMIT(p_cohort_table in varchar2, p_driver_table in varchar2, p_years in number, p_criteria in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_DEPT_ADMIT';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ' || p_criteria || '_ADMIT = 1 
    ,UPDATE_DATE = SYSDATE 
  WHERE 
    SELECTED IS NULL
    AND PAT_ID IN ( 
                SELECT DISTINCT  coh.PAT_ID 
                FROM ' || p_cohort_table  || '          coh 
                JOIN pat_enc_hsp                     enc ON coh.pat_id = enc.pat_id 
                --ccv4:(10/21/19) 
                JOIN pat_enc_dx                      dx ON enc.pat_enc_csn_id = dx.pat_enc_csn_id 
                join ' || p_driver_table ||'  drv on dx.dx_id = drv.dx_id AND drv.DX_FLAG = ''' || p_criteria || ''' 
                WHERE   
                    (coh.PL_' || p_criteria || ' = 1 OR COH.DX_' || p_criteria || ' = 1) 
                    AND dx.contact_date between sysdate - (365.25 * '|| p_years ||' ) AND sysdate
                    and coh.SELECTED IS NULL 
                    )';
 EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ' || p_criteria || '_ADMIT = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ' || p_criteria || '_ADMIT = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_DEPT_ADMIT;

-------------------------------------------------
-- Flag patients with chemotherapy CPT procedures for the Advanced Cancer criteria
-- it uses the corresponding code driver and adequate timeframe
-------------------------------------------------
procedure P_ACP_CHEMO_PROC(p_cohort_table in varchar2, p_driver_table  in varchar2, p_timeframe in number) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_CHEMO_PROC';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET CHEMO = 1  
    ,UPDATE_DATE = SYSDATE 
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN (      
        SELECT coh.pat_id 
          FROM ' || p_cohort_table  || '           coh 
          JOIN pat_enc                  enc on coh.pat_id = enc.pat_id 
          JOIN arpb_transactions                  cpt  ON enc.pat_enc_csn_id = cpt.pat_enc_csn_id  
          join ' || p_driver_table  || '                  drv on cpt.cpt_code = drv.cpt_code 
        WHERE 
            (coh.PL_CANCER = 1 OR COH.DX_CANCER = 1) 
            AND TRUNC(enc.EFFECTIVE_DATE_DT ) BETWEEN sysdate - (365.25 * ' || p_timeframe || ') AND sysdate 
        UNION 
        SELECT coh.pat_id 
          FROM ' || p_cohort_table  || '          coh 
          join hsp_account                     acc on coh.pat_id = acc.pat_id  
          JOIN HSP_TRANSACTIONS                  tx  ON acc.HSP_ACCOUNT_ID = tx.HSP_ACCOUNT_ID  
          JOIN pat_enc                          enc on tx.pat_enc_csn_id = enc.pat_enc_csn_id 
          join ' || p_driver_table  || '                  drv on tx.cpt_code = drv.cpt_code 
        WHERE 
            coh.SELECTED IS NULL 
            and (coh.PL_CANCER = 1 OR COH.DX_CANCER = 1) 
            AND TRUNC(enc.EFFECTIVE_DATE_DT ) BETWEEN sysdate - (365.25 * ' || p_timeframe || ') AND sysdate)';


EXECUTE IMMEDIATE q1; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CHEMO = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CHEMO medications');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
        end P_ACP_CHEMO_PROC;

-------------------------------------------------
-- Flag patients with chemotherapy medication treatments for the Advanced Cancer criteria
-- it uses the corresponding code driver and adequate timeframe
-------------------------------------------------
procedure P_ACP_CHEMO_MEDS(p_cohort_table in varchar2, p_med_keyword  in varchar2, p_timeframe in number) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_CHEMO_MEDS';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET CHEMO = 1  
    ,UPDATE_DATE = SYSDATE 
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN (      
        SELECT DISTINCT  med1.pat_id 
        FROM ( 
        SELECT  m.pat_id, 
            m.order_med_id,  
          case when m.medication_id != 800001 then m.medication_id 
               else coalesce(omi.dispensable_med_id, m.user_sel_med_id) end as used_med_id,        
            zom.name as ordering_mode, 
            zoc.name as order_class 
        FROM ' || p_cohort_table  || '      coh 
        JOIN order_med                      m   ON coh.pat_id = m.pat_id 
        LEFT JOIN order_medinfo omi on m.order_med_id = omi.order_med_id 
        left join zc_order_class zoc on m.order_class_C = zoc.order_class_c 
        left join zc_ordering_mode zom on m.ordering_mode_c = zom.ordering_mode_c 
        WHERE  
            coh.SELECTED IS NULL 
            AND (coh.PL_CANCER = 1 OR COH.DX_CANCER = 1) 
            AND TRUNC(m.ordering_date) BETWEEN sysdate - (365.25 * ' || p_timeframe ||') AND sysdate 
            and zoc.name <> ''Historical Med'' 
    ) med1 
LEFT JOIN clarity_medication cm on med1.used_med_id = cm.medication_id 
LEFT JOIN mar_admin_info  mar   ON med1.order_med_id = mar.order_med_id 
--ccv4: mar_action_c changes data type number/varchar2(10/21/19) 
LEFT JOIN zc_mar_rslt     xmrs  ON mar.mar_action_c = xmrs.result_c 
WHERE 
  (
  (med1.ordering_mode = ''Inpatient''                                       
            AND nvl(mar.taken_time,to_date(''01/01/0001'')) <> ''01/01/0001''       -- taken_time was valid
            AND nvl(mar.sig,-1) > 0                                             -- and SIG was valid and > 0
--ccv4: mar_action_c changes data type number/varchar2(10/21/19) 
            AND nvl(mar.mar_action_c,-1) <> ''125''                                 -- and action was anything other than ''Not Given''
         ) 
         OR med1.ordering_mode != ''Inpatient'' 
        )
    AND med1.used_med_id IS NOT NULL 
    AND (
        cm.pharm_subclass_c in (2150)  
        or regexp_like(cm.name,''' || p_med_keyword || ''',''i'') 
        or regexp_like(cm.generic_name,''' || p_med_keyword || ''',''i'') 
    )
    )';

EXECUTE IMMEDIATE q1; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CHEMO = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CHEMO CPT');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_CHEMO_MEDS;

-------------------------------------------------
-- Pull labs to calculate the MELD score for the ESDL criteria
-------------------------------------------------
procedure P_ACP_LAB_PULL(p_table_name in varchar2, p_cohort_table in varchar2, p_driver_table  in varchar2, p_timeframe in number) as
 q1 varchar2(6000);
 q2 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_LAB_PULL';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 
    --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_LAB(
--    PAT_ID VARCHAR2(18 BYTE), 
--	PAT_ENC_CSN_ID NUMBER(18,0), 
--	PROC_CODE VARCHAR2(91 BYTE), 
--	COMPONENT_ID NUMBER(18,0), 
--	RESULT_TIME DATE, 
--	LAB_FLAG VARCHAR2(50 BYTE),
--	HARM_NUM_VAL NUMBER
--    ) 
-- ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   

 q1 := 'INSERT INTO ' || p_table_name || '(PAT_ID,PAT_ENC_CSN_ID,PROC_CODE,COMPONENT_ID, RESULT_TIME, LAB_FLAG, HARM_NUM_VAL) 
     SELECT 	DISTINCT coh.pat_id, 
                o.pat_enc_csn_id, 
                --ccv4: mar_action_c changes data type number/varchar2(10/21/19)  
                --p.clarity_EAP__proc_code, 
                p.proc_code,
                o.component_id, 
                p.result_time, 
                drv.LAB_CATEGORY as LAB_FLAG, 
                CASE WHEN REGEXP_LIKE(o.ord_value,'':'',''i'') or REGEXP_SUBSTR(o.ord_value,''[1-9]\d*(\.\,\d+)?'') IS NULL 
                       THEN o.ord_num_value 
                  WHEN REGEXP_LIKE(o.ord_value,''[<>]=*'',''i'') 
                       THEN TO_NUMBER(REGEXP_SUBSTR(o.ord_value,''-?[[:digit:],.]*$''),''9999999999D9999999999'', ''NLS_NUMERIC_CHARACTERS = ''''.,'''''' ) 
                  WHEN REGEXP_LIKE(o.ord_value,''%'',''i'')  
                       THEN TO_NUMBER(REGEXP_SUBSTR(o.ord_value,''[1-9]\d*(\.\,\d+)?''),''9999999999D9999999999'', ''NLS_NUMERIC_CHARACTERS = ''''.,'''''' )   
                  ELSE o.ord_num_value END as harm_num_val                       
      FROM order_results                o 
      --ccv4: proc_code becomes clarity_EAP__proc_code(10/21/19) 
      JOIN order_proc                   p   ON p.order_proc_id = o.order_proc_id 
      JOIN ' || p_cohort_table  || '    coh ON p.pat_id = coh.pat_id AND (coh.PL_CIRRHOSIS = 1 OR COH.DX_CIRRHOSIS = 1) AND coh.SELECTED IS NULL 
      JOIN ' || p_driver_table  || '    drv ON p.proc_id = drv.proc_id and o.component_id = drv.component_id 
      JOIN order_proc_2                 op2 ON p.ORDER_PROC_ID = op2.ORDER_PROC_ID  
      JOIN clarity_component            cc  ON o.component_id = cc.component_id 
      LEFT JOIN lnc_db_main             ldm ON cc.DEFAULT_LNC_ID = ldm.record_id  
      WHERE    
              coh.SELECTED IS NULL   
              AND p.order_type_c IN (7) 
              AND o.ord_value IS NOT NULL 
              AND o.order_proc_id IS NOT NULL 
              AND p.order_time BETWEEN SYSDATE - (365.25 * ' || p_timeframe || ') AND CURRENT_DATE';

q2 := 'CREATE INDEX ' || p_table_name || '_IX_RSLT_FLAG ON ' || p_table_name || '(result_time,LAB_FLAG)';

EXECUTE IMMEDIATE q1;
--EXECUTE IMMEDIATE q2;

   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_table_name;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values (p_table_name, sysdate, v_audit_cnt,v_procname,'Pull lab records for cohort population');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_LAB_PULL;

-------------------------------------------------
-- Process labs results to calculate the MELD score for the ESDL criteria
-------------------------------------------------
procedure P_ACP_LAB_MELD_TABLE( p_lab_table in varchar2, p_meld_table in varchar2) as
 q1 varchar2(8000);
  v_procname varchar2(100) := 'P_ACP_LAB_MELD_TABLE';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

    --Create table (TABLE IS BEING TRUNCATED INSTEAD)
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_MELD_TABLE ("PAT_ID" VARCHAR2(18 BYTE)
--       ,"BILIRUBIN" NUMBER
--       ,"BILIRUBIN_RESULT_TIME" DATE
--       ,"CREATININE" NUMBER
--       ,"CREATININE_RESULT_TIME" DATE
--       ,"INR" NUMBER
--       ,"INR_RESULT_TIME" DATE
--       ,"LATEST_LAB" DATE
--       ,"SODIUM" NUMBER
--       ,"SODIUM_RESULT_TIME" DATE
--   )  
-- ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   


q1 :=  'INSERT INTO ' || p_meld_table  || ' (PAT_ID,BILIRUBIN,BILIRUBIN_RESULT_TIME,CREATININE,CREATININE_RESULT_TIME,INR,INR_RESULT_TIME,LATEST_LAB,SODIUM,SODIUM_RESULT_TIME)
select pat_id
        ,BILIRUBIN
        ,BILIRUBIN_RESULT_TIME
        ,CREATININE
        ,CREATININE_RESULT_TIME
        ,INR
        ,INR_RESULT_TIME
        ,LATEST_LAB
        ,SODIUM
        ,SODIUM_RESULT_TIME
from (
        select pat_id
                ,BILIRUBIN
                ,BILIRUBIN_RESULT_TIME
                ,CREATININE
                ,CREATININE_RESULT_TIME
                ,MIN(ABS(LATEST_LAB - CREATININE_RESULT_TIME)) OVER (partition by pat_id) as last_creatinine
                ,ABS(LATEST_LAB - CREATININE_RESULT_TIME) as DIFF_CREATININE
                ,INR
                ,INR_RESULT_TIME
                ,MIN(ABS(LATEST_LAB - INR_RESULT_TIME)) OVER (partition by pat_id) as last_inr
                ,ABS(LATEST_LAB - INR_RESULT_TIME) as DIFF_INR
                ,LATEST_LAB
                ,SODIUM
                ,SODIUM_RESULT_TIME
                ,MIN(ABS(LATEST_LAB - SODIUM_RESULT_TIME)) OVER (partition by pat_id) as last_sodium
                ,ABS(LATEST_LAB - SODIUM_RESULT_TIME) as DIFF_SODIUM
        from (select * from (
            select DISTINCT x.PAT_ID
                                ,x.BILIRUBIN
                                ,x.BILIRUBIN_result_time
                                ,x.INR
                                ,x.INR_result_time
                                ,x.diff_INR
                                ,x.CREATININE
                                ,x.CREATININE_result_time
                                ,x.diff_creatinine
                                ,x.SODIUM
                                ,x.SODIUM_result_time
                                ,x.diff_SODIUM
                                ,MAX(x.BILIRUBIN_result_time) OVER (PARTITION BY x.PAT_ID) AS LATEST_LAB
             from (
                     SELECT DISTINCT bili.PAT_ID
                                        ,bili.result_time as BILIRUBIN_result_time
                                        ,bili.harm_num_val as BILIRUBIN
                                        ,inr.INR
                                        ,inr.INR_result_time
                                        ,ABS(bili.result_time - inr.INR_result_time) as diff_INR
                                        ,cr.CREATININE
                                        ,cr.CREATININE_result_time
                                        ,ABS(bili.result_time - cr.CREATININE_result_time) as diff_creatinine
                                        ,sod.SODIUM
                                        ,sod.SODIUM_result_time
                                        ,ABS(bili.result_time - sod.SODIUM_result_time) as diff_sodium
                                    FROM ' || p_lab_table || ' bili
                                    JOIN (SELECT DISTINCT lab.PAT_ID
                                                ,lab.result_time as INR_result_time
                                                ,lab.harm_num_val as INR
                                            FROM ' || p_lab_table || ' lab
                                            WHERE LAB.LAB_FLAG = ''INR'' AND lab.harm_num_val <> 9999999) inr on bili.pat_id = inr.pat_id and (bili.result_time - inr.INR_result_time) between -1 and 1
                                    JOIN (SELECT DISTINCT lab.PAT_ID
                                                ,lab.result_time as CREATININE_result_time
                                                ,lab.harm_num_val as CREATININE
                                            FROM ' || p_lab_table || ' lab
                                            WHERE LAB.LAB_FLAG = ''CREATININE'' AND lab.harm_num_val <> 9999999) cr on bili.pat_id = cr.pat_id and (bili.result_time - cr.CREATININE_result_time) between -1 and 1                        
                                    JOIN (SELECT DISTINCT lab.PAT_ID
                                                ,lab.result_time as SODIUM_result_time
                                                ,lab.harm_num_val as SODIUM
                                            FROM ' || p_lab_table || ' lab
                                            WHERE LAB.LAB_FLAG = ''SODIUM'' AND lab.harm_num_val <> 9999999) sod on bili.pat_id = sod.pat_id and (bili.result_time - sod.SODIUM_result_time) between -1 and 1                        
                                    WHERE bili.LAB_FLAG = ''BILIRUBIN'' AND bili.harm_num_val <> 9999999                
                            ) x
                            )
                            where LATEST_LAB = BILIRUBIN_result_time
                            )
        )x
where 
diff_inr = last_inr
and diff_sodium = last_sodium
and diff_creatinine = last_creatinine';
EXECUTE IMMEDIATE q1; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_meld_table;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
          INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values (p_meld_table, sysdate, v_audit_cnt,v_procname,'Pull meld related records from lab records');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_LAB_MELD_TABLE;


-------------------------------------------------
-- Update MELD flags part of the ESDL criteria
-------------------------------------------------
procedure P_ACP_MELD(p_cohort_table in varchar2, p_lab_table in varchar2) as
 q1 varchar2(6000);
  v_procname varchar2(100) := 'P_ACP_MELD';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || 
  ' SET MELD = 1 
    ,UPDATE_DATE = SYSDATE 
  WHERE  
     SELECTED IS NULL 
     AND PAT_ID IN ( 
                    select DISTINCT pat_id 
                    from ( 
                            select pat_id 
                                    ,round( 
                                    ( 
                                        (0.378 * ln(Bilirubin)) + (1.120 * ln(INR)) + ((0.957 * ln(Creatinine)) + 0.643) 
                                    ) * 10 
                                    ,1) as meld 
                                ,sodium 
                                ,Bilirubin 
                                ,creatinine 
                                ,inr 
                    from( 
                        select  
                                labs.pat_id 
                                ,labs.Bilirubin 
                                ,labs.INR 
                                ,case when labs.Creatinine > 4.0 or dia.pat_id is not null then 4.0 
                                    else labs.Creatinine 
                                    end Creatinine                 
                                ,case when labs.sodium > 137 then 137 
                                    when labs.sodium < 125 then 125 
                                    else labs.sodium 
                                    end sodium 
                        from '  || p_cohort_table  || '     coh 
                        JOIN  ' || p_lab_table || '                   LABS ON COH.PAT_ID = LABS.PAT_ID 
                        left join (select pat_id, CREATININE_result_time 
                                    from ( 
                                        select lab.pat_id 
                                                ,lab.CREATININE_result_time 
                                                ,count(dia.contact_date) dialysis_count 
                                        from  ' || p_lab_table || '   lab 
                                        join  (SELECT DIAL.* 
                                                FROM PT_DIALYSIS_HX                 dial 
                                                JOIN  '|| p_cohort_table  ||'     coh ON dial.pat_id = coh.pat_id  
                                                                                    AND (coh.PL_CIRRHOSIS = 1 OR COH.DX_CIRRHOSIS = 1) 
                                                )          dia  on lab.pat_id = dia.pat_id  
                                                                and dia.CONTACT_DATE between lab.CREATININE_result_time - 7  and lab.CREATININE_result_time   
                                        group by lab.pat_id,lab.CREATININE_result_time 
                                        ) 
                        where dialysis_count >= 2)        dia on labs.pat_id = dia.pat_id and labs.CREATININE_RESULT_TIME = dia.CREATININE_RESULT_TIME 
                        ) 
            ) 
where meld + 1.32 * (137 - sodium) - (0.033 * meld * (137 - sodium)) > 18) ';
 EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where MELD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria MELD = 1');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_MELD;

-------------------------------------------------
-- Extract Ejection Fraction(EF) scores as part of the hypertension criteria
-------------------------------------------------
procedure P_ACP_EF_NARR(p_table_name in varchar2, p_cohort_table in varchar2, p_timeframe in number) as
 q1 varchar2(6000);
  v_procname varchar2(100) := 'P_ACP_EF_NARR';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 --Create table 
--    EXECUTE IMMEDIATE  'CREATE GLOBAL TEMPORARY TABLE XDR_ACP_NARR (	"PAT_ID" VARCHAR2(18 BYTE), 
--	"ACC_NUM" VARCHAR2(254 BYTE), 
--	"ORDER_PROC_ID" NUMBER(18,0) NOT NULL ENABLE, 
--	"NARR_LINE" NUMBER(38,0) NOT NULL ENABLE, 
--	"NARR_NARRATIVE" VARCHAR2(4000 BYTE), 
--	"ORDER_TIME" DATE, 
--	"ORD_VALUE" VARCHAR2(254 BYTE)
--   ) ON COMMIT PRESERVE ROWS'
--    ;
--    commit;   



 q1 := 'INSERT INTO ' || p_table_name || '(PAT_ID,ACC_NUM,ORDER_PROC_ID,NARR_LINE, NARR_NARRATIVE, ORDER_TIME, ORD_VALUE) 
   SELECT DISTINCT opr.pat_id 
               ,opr.acc_num 
               ,opr.order_proc_id 
               ,nar.line           AS narr_line 
               ,nar.narrative      AS narr_narrative 
		   ,order_time 
		   ,ord_value 
  FROM (SELECT DISTINCT coh.pat_id 
               ,opr.order_proc_id 
               ,opr.order_time 
                ,acc.acc_num 
               ,res.line 
               ,res.ord_value 
  FROM ' || p_cohort_table || '                    coh 
  JOIN order_proc               		opr ON coh.pat_id = opr.pat_id 
  LEFT JOIN order_results       res ON opr.order_proc_id = res.order_proc_id 
  LEFT JOIN order_rad_acc_num   acc ON opr.order_proc_id = acc.order_proc_id 
  WHERE  
  		(coh.pl_chf = 1 or coh.dx_chf = 1) 
        AND coh.SELECTED IS NULL 
        AND opr.order_status_c = 5                     				
        AND OPR.ORDER_TYPE_C = 29 
		AND opr.result_time between SYSDATE - (365.25 * ' || p_timeframe || ') AND SYSDATE)                      opr 
  JOIN order_narrative  nar ON opr.order_proc_id = nar.order_proc_id 
  WHERE trim(nar.narrative) IS NOT NULL';

EXECUTE IMMEDIATE q1;
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from ' || p_table_name;

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values (p_table_name, sysdate, v_audit_cnt,v_procname,'Pull narratives from orders');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

end P_ACP_EF_NARR;

-------------------------------------------------
-- Update EF flag as part of the hypertension criteria
-------------------------------------------------
procedure P_ACP_EF_FLAG(p_cohort_table in varchar2, p_narr_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_EF_FLAG';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET EF = 1  
    ,UPDATE_DATE = SYSDATE 
  WHERE  
    SELECTED IS NULL
    AND PAT_ID IN ( 
    SELECT distinct PAT_ID 
 from ( 
 SELECT PAT_ID 
		        ,ORDER_PROC_ID 
		        ,ORDER_TIME 
		        ,CASE 
				WHEN 
					ORD_VALUE IS NULL 
				THEN TEST_VALUES 
				ELSE (CASE 
						WHEN	REGEXP_LIKE ( ORD_VALUE	,''\+.\-'',''i'' ) 
						THEN TO_CHAR(TO_NUMBER(REGEXP_SUBSTR(ORD_VALUE,''[1-9]\d*(\.\,\d+)?''),''9999999999D9999999999'',''NLS_NUMERIC_CHARACTERS = ''''.,'''''') - 5) 
						ELSE COALESCE(REGEXP_SUBSTR(ORD_VALUE,''[1-9]\d*(\.\,\d+)?''),REGEXP_SUBSTR(ORD_VALUE,''?[[:digit:],.]*$'') ) 
					END)END AS LVEF_FINAL_VALUE 
		        ,TEST_VALUES NARR_VALUE 
		        ,ORD_VALUE 
		        ,NARR_AGG 
		    FROM  ( 
			SELECT PAT_ID 
			      ,ORDER_PROC_ID 
			      ,ORDER_TIME 
			      ,ORD_VALUE 
			      ,TRIM(	CASE 
					WHEN 
						REGEXP_LIKE(SUBSTR(NARR_AGG,REGEXP_INSTR(LOWER(NARR_AGG),''\d++.(to|-).\d++.(|^%)'',5),8),''(to|-)'',''i'') 
					THEN SUBSTR(NARR_AGG,REGEXP_INSTR(LOWER(NARR_AGG),''\d++.(to|-).\d++.(|^%)'',5),2) 
					ELSE SUBSTR(NARR_AGG,REGEXP_INSTR(LOWER(NARR_AGG),''\d++.(|^%)'',5),2) 
				END) AS TEST_VALUES 
			      ,NARR_AGG 
			  FROM (SELECT LVEF.PAT_ID 
		      ,LVEF.ORDER_PROC_ID 
		      ,LVEF.ACC_NUM 
		      ,LVEF.ORDER_TIME 
		      ,LVEF.ORD_VALUE 
		      ,LISTAGG(NARR.NARR_LINE 
		                  || ''|'' 
		                  || NARR.NARR_NARRATIVE,'' || '') WITHIN  GROUP(			 ORDER BY NARR.NARR_LINE		) NARR_AGG 
		  FROM (SELECT PAT_ID 
		      ,ACC_NUM 
		      ,ORDER_PROC_ID 
		      ,NARR_LINE 
		      ,ORDER_TIME 
		      ,ORD_VALUE 
		      ,NARR_NARRATIVE 
		  FROM ' || p_narr_table || '
		 WHERE (			LOWER(NARR_NARRATIVE) LIKE ''%ejection%'' 
			    OR UPPER(NARR_NARRATIVE) LIKE ''%LVEF%'' 
			    OR LOWER(NARR_NARRATIVE) LIKE ''%fraction%'')) LVEF 
          JOIN ' || p_narr_table || ' NARR ON LVEF.ORDER_PROC_ID = NARR.ORDER_PROC_ID  
		  							AND NARR.NARR_LINE  BETWEEN LVEF.NARR_LINE and LVEF.NARR_LINE  + 1 
		 GROUP BY LVEF.PAT_ID 
		      ,LVEF.ORDER_PROC_ID 
		      ,LVEF.ACC_NUM 
		      ,LVEF.ORDER_TIME 
		      ,LVEF.ORD_VALUE) 
		)) 
            WHERE LVEF_FINAL_VALUE in (''1'',''2'',''3'',''4'',''5'',''6'',''7'',''8'',''9'',''10'',''11'',''12'',''13'',''14'',''15'',''16'',''17'',''18'',''19'',''20'',''21'',''22'',''23'',''24'',''25'',''26'',''27'',''28'',''29'',''30'',''31''))';  

EXECUTE IMMEDIATE q1; 
 commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where EF = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria EF = 1');
      commit;
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);

        end P_ACP_EF_FLAG;

-------------------------------------------------
-- Merge all flags to update the different condition flags
-------------------------------------------------
procedure P_ACP_MERGE_CRITERION(p_cohort_table in varchar2) as
 q1 varchar2(4000);
 q2 varchar2(4000);
 q3 varchar2(4000);
 q4 varchar2(4000);
 q5 varchar2(4000);
 q6 varchar2(4000);

  v_procname varchar2(100) := 'P_ACP_MERGE_CRITERION';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
        DBMS_OUTPUT.PUT_LINE('proc name is: ' || v_procname); 

 q1 := 'UPDATE ' || p_cohort_table  || ' 
  SET ALS = 1  ,SELECTED = 1  ,UPDATE_DATE = SYSDATE  
  WHERE  
    (PL_ALS = 1 AND DX_ALS = 1)  
        AND SELECTED IS NULL';

 q2 := 'UPDATE ' || p_cohort_table  || ' 
  SET CANCER = 1  ,SELECTED = 1   ,UPDATE_DATE = SYSDATE 
  WHERE  
    (
    (PL_CANCER = 1 AND ONC_VISIT = 1)
    OR
    (DX_CANCER = 1 AND CHEMO = 1)
    )
        AND SELECTED IS NULL'
    ;

q3 := 'UPDATE ' || p_cohort_table  || ' 
  SET CHF = 1 ,SELECTED = 1   ,UPDATE_DATE = SYSDATE 
  WHERE  
        (
        ((PL_CHF = 1 OR DX_CHF = 1) AND EF = 1)
        OR
        (PL_CHF = 1  AND CHF_ADMIT = 1) 
        )
        AND SELECTED IS NULL'
    ;

q4 := 'UPDATE ' || p_cohort_table  || ' 
  SET COPD = 1  ,SELECTED = 1   ,UPDATE_DATE = SYSDATE 
  WHERE  
        (PL_COPD = 1 AND COPD_ADMIT = 1) 
        AND SELECTED IS NULL'
    ;

q5 := 'UPDATE ' || p_cohort_table  || ' 
  SET ESLD = 1 ,SELECTED = 1    ,UPDATE_DATE = SYSDATE 
  WHERE  
        PL_CIRRHOSIS = 1 
        AND 
        (PL_ESDL_DECOMPENSATION = 1
        OR dx_ESDL_decompensation = 1
        OR MELD = 1) 
        AND SELECTED IS NULL'
    ;

q6 := 'UPDATE ' || p_cohort_table  || ' 
  SET ESRD = 1 ,SELECTED = 1   ,UPDATE_DATE = SYSDATE 
  WHERE  
        (
            (PL_ESRD = 1 OR DX_ESRD = 1 )
        AND NEPH_VISIT = 1
        )
        OR
        (PL_ESRD = 1 AND DX_ESRD = 1 ) 
        AND SELECTED IS NULL'
    ;
EXECUTE IMMEDIATE q1; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ALS = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ALS = 1');
      commit;   
EXECUTE IMMEDIATE q2; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CANCER = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CANCER = 1');
      commit;   
EXECUTE IMMEDIATE q3; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where COPD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria COPD = 1');
      commit;
EXECUTE IMMEDIATE q4; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where CHF = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria CHF = 1');

      commit;   

EXECUTE IMMEDIATE q5; 
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ESLD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ESLD = 1');
      commit; 

EXECUTE IMMEDIATE q6; 
   commit;
--- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where ESRD = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria ESRD = 1');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_MERGE_CRITERION;

-------------------------------------------------
-- calculate age criteria 
-- Patients over the age limit (> 75) + one PL DX code
-- This age limit was set up on 2019
-------------------------------------------------
procedure P_ACP_AGE_CRTIERIA(p_cohort_table in varchar2, p_age_limit in varchar2) as
 q1 varchar2(4000);

  v_procname varchar2(100) := 'P_ACP_AGE_CRTIERIA';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

 q1 := 'UPDATE ' || p_cohort_table  || ' 
        SET AGE = 1, selected = 1  ,UPDATE_DATE = SYSDATE 
        WHERE 
            SELECTED IS NULL
            AND (pl_copd IS NOT NULL
            OR pl_chf IS NOT NULL 
            OR PL_ESRD IS NOT NULL
            OR PL_ALS IS NOT NULL 
            OR PL_CANCER IS NOT NULL
            OR PL_CIRRHOSIS IS NOT NULL)
            and CURRENT_AGE >= ' || p_age_limit || '';
EXECUTE IMMEDIATE q1;
   commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AGE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria AGE = 1');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);
end P_ACP_AGE_CRTIERIA; 

-------------------------------------------------
-- Pull all Advanced Directive documents on record for selected patients
-- this pull uses a driver table generated in the first section
-------------------------------------------------
procedure P_ACP_ADPOLST(p_adpolst_table in varchar2, p_cohort_table in varchar2, p_driver_adpolst in varchar2, p_driver_record_stat in varchar2, p_driver_doc_stat in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 :=  'INSERT INTO ' || p_adpolst_table || 
  ' SELECT distinct coh.pat_id 
                                ,bb.doc_info_id 
                                ,bb.SCAN_FILE 
                                ,BT.DOC_GROUP
                                ,bb.doc_recv_time
                                ,case when bb.doc_recv_time between sysdate - (365.25 *3 ) AND sysdate then 1 else 0 end three_year_ad_polst 
                        FROM ' || p_cohort_table ||'          COH   
                        --ccv4:(10/21/19) 
                        join DOC_INFORMATION                    BB on coh.PAT_ID = BB.DOC_PT_ID 
                        join ' || p_driver_adpolst || '        BT on BB.DOC_INFO_TYPE_C = BT.DOC_INFO_TYPE_C 
                        WHERE  
                            --TRUNC(SYSDATE) - TRUNC(coh.CREATION_DATE) BETWEEN  0 AND 3   AND 
                            BB.IS_SCANNED_YN = ''Y''  
                            -- We noticed that in the case of AD-POLST documents, there were instances where the docs had been deleted 
                            and ( 
                                bb.RECORD_STATE_C IS NULL 
                                OR bb.RECORD_STATE_C not in (SELECT RECORD_STATE_C FROM ' || p_driver_record_stat || ') 
                                )-- Deleted 
                            and ( 
                                bb.DOC_STAT_C IS NULL 
                                OR bb.DOC_STAT_C NOT IN (SELECT DOC_STAT_C FROM ' || p_driver_doc_stat || ') 
                                )-- Error 
                            and bb.DOC_REVOK_DT is null';

EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_ADPOLST';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_ADPOLST', sysdate, v_audit_cnt,v_procname,'AD POLST TABLE CREATED');
      commit;

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST;

-------------------------------------------------
-- Update AD/POLST Yes/No flag
-------------------------------------------------
procedure P_ACP_ADPOLST_update(p_cohort_table in varchar2, p_adpolst_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST_UPDATE';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
 USING ( 
SELECT DISTINCT PAT_ID 
            ,CASE WHEN POLST_ALL = 0 OR POLST_ALL IS NULL THEN 0 ELSE 1 END POLST_ALL 
            ,CASE WHEN AD_ALL = 0 OR AD_ALL IS NULL THEN 0 ELSE 1 END AD_ALL 
            ,CASE WHEN POLST_THREE = 0 OR POLST_THREE IS NULL THEN 0 ELSE 1 END POLST_THREE 
            ,CASE WHEN AD_THREE = 0 OR AD_THREE IS NULL THEN 0 ELSE 1 END AD_THREE 
FROM ( 
        SELECT PAT_ID 
                ,SUM(POLST_ALL) AS POLST_ALL 
                ,SUM(AD_ALL) AS AD_ALL 
                ,SUM(POLST_THREE) AS POLST_THREE 
                ,SUM(AD_THREE) AS AD_THREE 
        FROM ( 
                SELECT DISTINCT PAT_ID 
                        ,CASE WHEN DOC_GROUP = ''POLST'' THEN 1 ELSE 0 END POLST_ALL 
                        ,CASE WHEN DOC_GROUP  = ''AD'' THEN 1 ELSE 0 END AD_ALL 
                        ,CASE WHEN DOC_GROUP = ''POLST'' and three_year_ad_polst = 1 THEN 1 ELSE 0 END POLST_THREE 
                        ,CASE WHEN DOC_GROUP  = ''AD'' and three_year_ad_polst = 1 THEN 1 ELSE 0 END AD_THREE 
                FROM (SELECT distinct ap.pat_id 
                                ,ap.doc_info_id 
                                ,ap.SCAN_FILE 
                                ,ap.DOC_GROUP 
                                ,ap.three_year_ad_polst 
                        FROM ' || p_adpolst_table ||'          ap ) 
                ) 
            GROUP BY PAT_ID 
    ) 
 ) R
 ON(COH.PAT_ID = R.PAT_ID) 
 WHEN MATCHED THEN 
 UPDATE SET  
 coh.AD_ALL = r.AD_ALL 
 ,coh.AD_THREE = r.AD_THREE 
 ,coh.POLST_ALL = r.POLST_ALL 
 ,coh.POLST_THREE = r.POLST_THREE 
 ,coh.UPDATE_DATE = SYSDATE ';

EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_ALL = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria AD_ALL = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_THREE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria AD_THREE = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where POLST_ALL = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria POLST_ALL = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where POLST_THREE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'Criteria POLST_THREE = 1');
      commit;      

    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST_update;


-------------------------------------------------
-- Calculate Last date for AD/POLST
-------------------------------------------------
procedure P_ACP_ADPOLST_date(p_cohort_table in varchar2, p_adpolst_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST_date';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN
 q1 :=  'MERGE INTO ' || p_cohort_table ||' coh 
USING( 
        SELECT DISTINCT PAT_ID 
                    ,MAX(MOST_RECENT_AD) AS MOST_RECENT_AD 
                    ,MAX(MOST_RECENT_POLST) AS MOST_RECENT_POLST 
        FROM ( 
            select distinct  
            pat_id 
            ,case when doc_group = ''AD'' THEN MOST_RECENT ELSE NULL END MOST_RECENT_AD 
            ,case when doc_group = ''POLST'' THEN MOST_RECENT ELSE NULL END MOST_RECENT_POLST 
            from ( 
                    SELECT  
                    PAT_ID 
                    ,MAX(doc_recv_time) OVER (PARTITION BY PAT_ID,DOC_GROUP) AS MOST_RECENT 
                    ,DOC_GROUP 
                    FROM ' || p_adpolst_table || ') 
            ) 
        GROUP BY PAT_ID) r 
ON (coh.pat_id = r.pat_id  ) 
when matched then UPDATE SET 
coh.MOST_RECENT_AD = r.MOST_RECENT_AD 
,coh.MOST_RECENT_POLST = r.MOST_RECENT_POLST 
,coh.UPDATE_DATE = SYSDATE ';

EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where MOST_RECENT_AD IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'MOST_RECENT_AD IS NOT NULL');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where MOST_RECENT_POLST IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'MOST_RECENT_POLST IS NOT NULL');
      commit;
      
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST_date;


-------------------------------------------------
-- Merge the last date for AD/POLST to use when calculating patients with a
-- > 3 years old documents
-------------------------------------------------
procedure P_ACP_ADPOLST_merge(p_cohort_table in varchar2) as
 q1 varchar2(4000);
  v_procname varchar2(100) := 'P_ACP_ADPOLST_merge';
     v_audit_cnt number;
   v_qry_str varchar2(6000);

  BEGIN

   q1 := 'MERGE INTO ' || p_cohort_table || ' coh  
     USING (SELECT PAT_ID 
            ,CASE WHEN AD_ALL + POLST_ALL >= 1 THEN 1 ELSE 0 END AD_POLST_ALL
            ,CASE WHEN AD_THREE + POLST_THREE >= 1 THEN 1 ELSE 0 END AD_POLST_THREE
            ,CASE WHEN coh.MOST_RECENT_AD is not null 
                        and  coh.MOST_RECENT_POLST is not null 
                        and  coh.MOST_RECENT_AD >= coh.MOST_RECENT_POLST 
                    THEN coh.MOST_RECENT_AD 
                WHEN coh.MOST_RECENT_AD is not null 
                        and  coh.MOST_RECENT_POLST is not null 
                        and  coh.MOST_RECENT_POLST > coh.MOST_RECENT_AD 
                    THEN coh.MOST_RECENT_POLST 
                WHEN coh.MOST_RECENT_AD is not null 
                        and  coh.MOST_RECENT_POLST is null 
                    THEN coh.MOST_RECENT_AD 
                WHEN coh.MOST_RECENT_POLST is not null 
                        and  coh.MOST_RECENT_AD is null  
                    THEN coh.MOST_RECENT_POLST                        
                ELSE coh.MOST_RECENT_POLST 
                END LAST_AD_POLST 
FROM ' || p_cohort_table || ' COH)r 
ON (coh.pat_id = r.pat_id  )
WHEN MATCHED THEN  
UPDATE SET 
coh.LAST_AD_POLST = r.LAST_AD_POLST, 
coh.AD_POLST_ALL = r.AD_POLST_ALL, 
coh.AD_POLST_THREE = r.AD_POLST_THREE
,coh.UPDATE_DATE = SYSDATE ';
EXECUTE IMMEDIATE q1;
    commit;
      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_POLST_ALL = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'AD_POLST_ALL = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where AD_POLST_THREE = 1';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'AD_POLST_THREE = 1');
      commit;

      --- update ACP_ETL_LOG with record count prior to truncate 
    v_qry_str := 'select COUNT(*) from XDR_ACP_COHORT where LAST_AD_POLST IS NOT NULL';

      EXECUTE IMMEDIATE v_qry_str INTO v_audit_cnt;
        INSERT INTO CTSI_RESEARCH.ACP_ETL_LOG(TBL_NAME, LOG_TIME, RECORD_COUNT,PROCEDURE_NAME,COMMENTS) values ('XDR_ACP_COHORT', sysdate, v_audit_cnt,v_procname,'LAST_AD_POLST IS NOT NULL');
      commit;

      
    EXCEPTION
      WHEN OTHERS THEN 
        v_code := SQLCODE;
        v_errm := substr(sqlerrm, 1, 100);
        PRINT_ERROR(v_procname, v_code, v_errm);


end P_ACP_ADPOLST_merge;

